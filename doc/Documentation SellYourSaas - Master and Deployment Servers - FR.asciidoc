= Document installation et exploitation SellYourSaas
Ce document décrit la mise en oeuvre technique et fonctionelle de SellYourSaas - système de déploiement et vente automatisé en SaaS d'une application WAMP (comme Dolibarr ERP CRM, GLPI, ...) - Laurent Destailleur - www.sellyoursaas.org
:source-highlighter: rouge
:companyname: Teclib
:corpname: Teclib
:orgname: Teclib
:creator: Laurent Destailleur
:title: Document installation et exploitation de SellYourSaas
:subject: Ce document décrit la mise en oeuvre technique et fonctionnelle de SellYourSaas (système de déploiement et vente automatisé en SaaS d'une application WAMP (comme Dolibarr ERP CRM, GLPI, ...).
:keywords: sellyoursaas, saas, dolibarr, wamp, glpi
:imagesdir: ./img
:city: Bordeaux
:toc: manual
:toclevels: 3                                                       
:toc-title: Table des matières  
:toc-placement: preamble
:revnumber: v1.0
:revdate: 2019-01-30
:revremark: Première version
:revnumber: v1.1
:revdate: 2020-02-12
:revremark: Nombreuses améliorations

<<<<

== Introduction ==

SellYourSaas est un projet Open Source, né suite au besoin de fournir, en temps réel, des instances d'application Web (comme Dolibarr ERP CRM, GLPI, MediaWiki, ...) à des utilisateurs, à des fins d'utilisation immédiate, avec les impératifs suivants:

	* Capable de gérer un nombre très élevé d'instances et d'utilisateurs.
	* Cout très faibles (devant être au moins 10x inférieurs aux solutions Cloud par containers).
	* Déploiement en temps réel.
	* Offrir un accès complet et privé à l'application proposée, y compris à l'administration, avec accès complet sans bridage de fonctionnalités ou paramétrage.
	* Offrir en option du SaaS 100% ouvert, donc avec accès SSH, SFTP et base de donnée direct possible aux utilisateurs. 

Suite au déploiement de la v1 et à la demande d'utilisateurs pour pérenniser leur instance via une souscription, la plateforme évolua pour ajouter d'autres objectifs :

	* Prendre en compte la souscription au applications édployées sous forme d'abonnements payants.
	* Offrir un espace client dédié pour gestion de ces factures, comptes et support.
	* Système 100% automatisé (de l'arrivée du prospect à la résiliation de son abonnement, en passant par la délivrance du service, sauvegardes, supervision et alimentation de la comptabilité: pas d'intervention humaine).
	* Une souplesse dans le mode d'abonnement (fréquence, tarifs, service complémentaires, options, ...)
	* Compatible (ou à minima adaptable) pour toute application Web.
	* Gestion d'un réseau de revendeur.
	* Disponible en OpenSource.
	
Financé par les sociétés Open Source https://www.dolicloud.com[DoliCloud] et https://www.teclib.com[TecLib], SellYourSaas v2 a atteint ces objectifs et est aujourd'hui en production chez plusieurs sociétés proposants des services Saas (https://www.dolicloud.com[DoliCloud], https://www.novafirstcloud.com[NovaFirstCloud], https://www.glpi-network.cloud[GLPI-Network], ...). Voici une synthèse de ses capacités:

    * Déploiement de n'importe quelle application WAMP. Gestion de multiples solutions/applications différentes en même temps.
    * Diffusion d'instances gratuites ou de tests sans demande d'informations confidentiels ni cartes bancaires.
    * Diffusion d'instances payantes avec différents niveaux de tarifications.
    * Site web vitrine (optionnel) prêt à l'emploi pour vendre votre application.
    * Espace client dédié (facturation, ticket, compte client).
    * Précablé pour une supervision via DataDog.
    * Précablé pour une analyse de performance, taux de conversion via Google Analytics.
    * Paiement par carte bancaire via Stripe, conforme SCA (Strong Customer Authentication).
    * Paiement par prélèvement SEPA (mais pas d'interface direct pour soumettre les fichiers SEPA à la banque).
    * Systèmes anti usage abusif des applications.
    * Systèmes de quota de souscription d'instances.
    * Outils facilitant la maintenance, le support des clients, les mises à jour des applications.
    * Gestion d'un réseau de revendeur. Espace revendeur dédié (facturation, compte client).
    * Coût d'infrastructure par instance < 30 centimes (Coût constaté sur le service commercial DoliCloud fournissant Dolibarr ERP CRM).
    * ... 
     

Le projet est disponible de manière communautaire depuis 2020 sur GitHub: https://github.com/dolicloud/sellyoursaas

Il est composé:

    * D'un module extension à l'excellent ERP CRM Open Source Dolibarr (https://www.dolibarr.org).
    * Des outils systèmes divers.
    * Une documentation d'installation et paramétrage système (cette documentation). 


Ce document présente les étapes pour mettre en oeuvre votre propre plateforme de business SaaS.
	
<<<<

== Choix et acquisition d'un nom de domaine

L'ensemble du service va tourner sur un nom de domaine. Dans la suite du document, nous utiliserons la valeur *mydomain.com*
Il vous faut acquerrir ce nom de domaine auprès d'un registrar.


== Installation de la machine et OS

La première étape est de mettre à disposition un (ou plusieurs) serveur. Si on part sur plusieurs serveurs, l'un sera serveur *Master* (pilotage et facturation) et les autres seront *Serveurs de déploiement* (les instances des clients). Le serveur *Master* pouvant aussi être *Serveur de déploiement*, il est possible de démarrer avec un seul serveur.

=== Choix de la machine et de l'OS et création

* Obtenir un serveur avec un accès SSH pouvant passer root (On utilisera Ubuntu LTS minimal *16.04* ou *18.04* or *20.04*) pour le *Serveur Master*.

* Obtenir un ou n serveurs avec un accès SSH pouvant passer root (On utilisera Ubuntu LTS minimal 16.04 ou 18.04 or 20.04) pour le ou les *Serveurs de Déploiement*. Remarque: Ce point peut être ignorée si vous décidez que le serveur de Déploiement sera le même serveur que le serveur Master (non recommandé en production).

_Exemple avec Amazon Standard Medium:_

Server *m1.medium* hosted in EU @ $0.18 per hour plus $10 for storage and bandwidth puis passage à *m1.large* @ $0.18 per hour

_Exemple avec OVH Public Cloud:_
 
Pour le serveur master: VPS ou B2-15 ou +
Pour le ou les serveurs de déploiement, pour 500 instances: B2-15 ou + (soit server 2 core minimum - Mémoire 8 Go minimum - Coût en 2020: 22 euros / mois). Doublez les caractéristiques si vous visez 1 000 instances client par serveur.


=== Choix du Hostname pour le(s) server(s) et configuration

Ajouter une entrée du nouveau serveur dans le DNS fourni par le provider du domaine. Ceci revient à ajouter une entrée dans la zone DNS de *mysaasdomainname.com*

[source,bash]
---------------
type=A
name=nomduserveur.mysaasdomainname.com
ip=ipv4.of.the.server

type=AAAA
name=nomduserveur.mysaasdomainname.com
ip=ipv6:of:the:server
---------------


Aller dans l'interface de gestion des IP OVH, pour ajouter le reverse sur l'IP du serveur.

Aller dans l'interface de gestion des serveurs OVH, pour modifier leur nom court. Ceci modifiera le fichier */etc/hostname* automatiquement (sinon modifier manuellement) avec le nom court. Le fichier aura alors comme seul contenu: 

[source,bash]
---------------
nomduserveur
---------------


Se connecter et modifier le fichier */etc/hosts* avec l'entrée du nouveau serveur 

[source,bash]
---------------
ip.principale.du.serveur   nomduserveur.mysaasdomainname.com
127.0.0.1  nomduserveur
---------------



[[ajout_de_disque]]
=== Ajout du ou des disques durs de données (home des instances utilisateurs et home des sauvegardes)

Sur le *Serveur de déploiement* :

On va ajouter, sur le *Serveur de déploiement*, un disque indépendant pour les instances utilisateurs et les sauvegardes. Il peut s'agir d'un disque pour les 2 ou bien de 2 disques différents.

Avec OVH Public Cloud:

* Créer le disque de données . Pour le serveur de déploiement, prendre 250Mo par instance.
* Associer le disque au serveur (chaque disque suplémentaire est ajouté en /dev/vdb, /dev/vdc, /dev/vdd, ...).
Remarque, le disque devient visible avec *fdisk -l* et *lsblk*
* Si c'est un disque jamais partitionné, ajouter la partition sur le disque (type Linux) et la formater en faisant:

[source,bash]
---------------
fdisk -l
fdisk /dev/vdx
option n puis p (choisir alors le numéro de partition, premier et dernier secteur) puis w

fdisk -l

fsck -N /dev/vdxY
mkfs.ext4 /dev/vdxY
---------------

Que le disque viennent d'etre formaté ou qu'il s'aggisse d'un disque ajouté déjà formaté, la suite de la procédure est identique:

* Récuper la valeur du UUID à l'issue du formatage qui s'affiche, sinon, la récupérer avec la commande *blkid*

* Déclarer le montage pour un montage automatique à chaque reboot en ajoutant une ligne dans */etc/fstab*

[source,bash]
---------------
UUID=94817f83-a2ad-46c4-81e0-06e6dd0e95f1 /mnt/diskX ext4 defaults 0 0
ou
UUID=94817f83-a2ad-46c4-81e0-06e6dd0e95f1 /mnt/diskX ext4 noatime,nofail 0 0 (ne bloque pas le démarrage du serveur)
---------------

* Monter les disques

[source,bash]
---------------
mkdir /mnt/diskhome
mount /dev/vdxY /mnt/diskhome
mkdir /mnt/diskbackup

Et seulement si un disque dédié (optionnel) a été créé pour le backup:
mount /dev/vdxZ /mnt/diskbackup

blkid
---------------

* Optimiser le filesystem en supprimant la mise à jour des accès lecture "atime"

Pour voir les options d'optimisation des filesystems:

[source,bash]
---------------
tune2fs -l /dev/vdxY | grep features
---------------
retourne

	Filesystem features:      has_journal ext_attr resize_inode dir_index filetype needs_recovery extent flex_bg sparse_super large_file huge_file uninit_bg dir_nlink extra_isize


Pour ajouter -noatime sur le filesystem dans le fichier */etc/fstab* :

[source,bash]
---------------
UUID=94817f83-a2ad-46c4-81e0-06e6dd0e95f1 /mnt/diskX ext4 noatime,nofail 0 0
---------------

Pour prendre en compte le changement:

[source,bash]
---------------
mount -o remount /dev/diskX/
---------------

Pour vérifier:

[source,bash]
---------------
cat /proc/mounts | grep diskX
---------------

Rem: Pour information, si il faut récupérer les fichiers de données d'un autre disque source, utilisez:

[source,bash]
---------------
rsync --info=progress2 -au serveursource:/mnt/diskSource /mnt/diskTarget

Example:
cd /mnt/diskSource
rsync --info=progress2 --exclude 'dbn*' -au -e 'ssh' . loginuser@myserverdest.mydomain.com:/var/lib/mysql
chown -R mysql.mysql /var/lib/mysql
Après avoir lancé mysql, il est possible de tester les bases par
mysqlcheck --all-databases
---------------



=== SSH et sudo

==== Compte unix admin

Créer le compte utilisateur *admin*. Il sera utilisé pour installer et administrer le systeme lorsque root n'est pas nécessaire.

[source,bash]
---------------
groupadd admin; useradd -m -g admin admin;
mkdir /home/admin/logs; chown root.admin /home/admin/logs; chmod 770 /home/admin/logs;
mkdir /mnt/diskbackup; chown admin.admin /mnt/diskbackup
mkdir /home/admin/backup; chown admin.admin /home/admin/backup;
mkdir /home/admin/backup/conf; chown admin.admin /home/admin/backup/conf;
mkdir /home/admin/backup/mysql; chown admin.admin /home/admin/backup/mysql;
mkdir /home/admin/wwwroot; chown admin.admin /home/admin/wwwroot
---------------

Vérifiez que le id de ce user *admin* est bien supérieur ou égale à 1000.
 

Créer un compte utilisateur pour vous même (ou d'autres administrateurs), par exemple: *myunixlogin*. Il sera utiliser pour vous logguer.

[source,bash]
---------------
adduser myunixlogin
---------------


==== Shell par défaut

Modifier le shell par défaut pour utiliser bash (au lieu dh sh ou dash)

[source,bash]
---------------
ln -fs /bin/bash /usr/bin/sh
---------------

Ou pour Ubuntu 18.04

[source,bash]
---------------
ln -fs /bin/bash /bin/sh
---------------


==== Configuration SSH

Corriger les permissions du fichier */etc/ssh/sshd_config* pour etre en lecture/écriture pour root uniquement.

[source,conf]
---------------
chmod go-rw /etc/ssh/sshd_config
---------------

Créer un fichier */etc/ssh/sshd_config.d/sellyoursaas.conf* pour changer les autorisations de login avec le contenu suivant:

Pour ubuntu 18.04: il faut concaténner le contenu cité dans le *sshd_config* mais attention à ne pas conserver de doublons de paramètres.

[source,conf]
---------------
# Privilege Separation is turned on for security
#UsePrivilegeSeparation yes
# Permissions on files must be correct to allow login
StrictModes yes

Port 22

# MaxAuthTries 6
MaxAuthTries 10
# MaxSessions 10
MaxSessions 25

# Disallow login to root
PermitRootLogin no
# Disallow empty passwords
PermitEmptyPasswords no
# Do not support the "keyboard-interactive" authentication scheme defined in RFC-4256.
ChallengeResponseAuthentication no
 
# Define list of allowed method to authenticate
PasswordAuthentication yes
PubkeyAuthentication yes

DenyUsers guest

AuthorizedKeysFile     .ssh/authorized_keys .ssh/authorized_keys_support

AllowUsers admin osu*
AllowUsers myunixlogin

# Legacy changes - To allow an old client (like old PHP) to connect to
KexAlgorithms +diffie-hellman-group1-sha1
Ciphers +aes128-cbc
---------------

Attention, à bien remplacer *myunixlogin* par la bonne valeur avant de prendre en compte les modifications par:

[source,conf]
---------------
/etc/init.d/ssh reload
---------------

Ajouter la ligne suivante dans le fichier */etc/sudoers* pour repositionner le HOME selon le user apres un sudo -s:

[source,conf]
---------------
Defaults        set_home
---------------

Créer un fichier */etc/sudoers.d/myunixlogin*

[source,conf]
---------------
myunixlogin ALL=(ALL) ALL
# You can also add this line to force user to re-enter its password to switch to root (and not for admin)
myunixlogin ALL=(ALL) NOPASSWD:/usr/bin/su - admin
---------------

Cela permet aussi de basculer sur *admin* ou tout compte *osu...* sans avoir à saisir son mot de passe:

[source, bash]
---------------
sudo su - admin
sudo su - osu...
---------------

Et positionner le owner *root.root* et les permissions *r--r-----*

[source, conf]
---------------
chmod a-w /etc/sudoers.d/myunixlogin
chmod o-r /etc/sudoers.d/myunixlogin
---------------


Tester qu'il est possible de se connecter par login et mot de passe depuis l'exterieur avec *myunixlogin* par

[source,bash]
---------------
ssh -v myunixlogin@x.y.z.a
sudo -s
---------------


Ajouter votre clé publique à votre compte unix.

[source,bash]
---------------
ssh-copy-id myunixlogin@x.y.z.a
---------------


Définir ou redéfinir le mot de passe de *root*, *admin* avec un mot de passe sure.

[source,bash]
---------------
passwd root
passwd admin
---------------

Lancer *ssh-keygen* sur les 3 comptes *root*, *admin* et *myunixlogin*



=== Suppression des fichiers d'information au login

Afin de ne pas donner d'information aux utilisateurs qui feront du SSH, sur les serveurs de déploiements:

[source,bash]
---------------
rm /etc/update-motd.d/10-help-text /etc/update-motd.d/20-runabove 
rm /etc/update-motd.d/50-landscape-sysinfo /etc/update-motd.d/9*-update*-available /etc/update-motd.d/92-unattended-upgrades
---------------

Ignorer les erreurs de fichiers absents.



=== Modification de /etc/skel

Editer le contenu de */etc/skel* sur le serveur de déploiement afin de remplir le fichier *.ssh/authorized_keys_support* avec
* la clé ssh public key de l'utilisateur *myunixlogin*
* la clé ssh public key de l'utilisateur *admin* du serveur master

[source, bash]
---------------
sudo mkdir /etc/skel/.ssh
sudo touch /etc/skel/.ssh/authorized_keys_support
sudo chmod -R go-rwx /etc/skel/.ssh
sudo vi /etc/skel/.ssh/authorized_keys_support
---------------

Ainsi, l'administrateur pourra accéder à tout nouveau compte créé (ceux des instances clients).

Créez également un fichier de configuration mysql dans */etc/skel/.my.cnf* afin de permettre aux clients finaux de
votre SellYourSaas d'utiliser le client mysql en console depuis une connexion shell ssh.

[source, bash]
---------------
printf '[client]\nprotocol=tcp' >> /etc/skel/.my.cnf
---------------




=== Ajout alias

Ajouter à la fin de */etc/bash.bashrc*:

[source,bash]
---------------
alias psld='ps -fax -eo user:12,pid,ppid,pcpu,pmem,vsz:12,size:12,tty,start_time:6,utime,time,cmd'
---------------



=== Ajout du support de l'IP v6 (optionnel, si ipv6 désiré et pas encore paramétré)

==== Avec ifupdown (Ubuntu 16.04)

- Pour ajouter une IP v6 de manière dynamique à des fins de test dans un premier temps: 

[source,bash]
---------------
ip addr add 2002:41d0:1234:1000::1234/128 dev eth0
ip -6 route add 2002:41d0:1234:1000::1 dev eth0
ip -6 route add default via 2002:41d0:1234:1000::1 dev eth0
---------------

- Pour une définition persistente au reboot, déclarer l'interface dans */etc/network/interfaces* ou dans un fichier de */etc/network/interfaces.d* (Ubuntu < 17.10)

Exemple pour une IPv6 2002:41d0:1234:1000::1234 avec comme gateway 2002:41d0:1234:1000::1

[source,conf]
---------------
# Pour declarer une IP v6 persistente (le masque est 128 chez OVH en ipv6) 
iface eth0 inet6 static
        address 2002:41d0:1234:1000::1234
        netmask 128
        post-up /sbin/ip -6 route add 2002:41d0:1234:1000::1 dev eth0
        post-up /sbin/ip -6 route add default via 2002:41d0:1234:1000::1 dev eth0
        pre-down /sbin/ip -6 route del default via 2002:41d0:1234:1000::1 dev eth0
        pre-down /sbin/ip -6 route del 2002:41d0:1234:1000::1 dev eth0
---------------

Rem: *eth0* can be something else, for example *ens3*.

Pour prendre en compte, essayer ceci, sinon, reboot.

[source,bash]
---------------
/etc/init.d/networking restart
---------------

==== Avec netplan (Ubuntu 18.04 +)

Ajouter un fichier de conf */etc/netplan/51-ipv6-ovh.yaml*.
Remarque: OVH fourni un /128 pour l'ipv6 mais netplan veut du /64
 
Exemple pour une IPv6 1234:41d0:1234:1000::1234 avec comme gateway 1234:41d0:1234:1000::1

[source,conf]
---------------
network:
	version: 2
	ethernets:
		eth0:
			match:
				name: eth0
			addresses:
				- "1234:41d0:1234:1000::1234/64"
			gateway6: "1234:41d0:1234:1000::1"
---------------
Note: Use 4 spaces for tabulation.
 
[source,bash]
---------------
netplan try
netplan apply
---------------

Rem: *eth0* can be something else, for example *ens3*.


=== Ajout IP virtuelle (optionnel)

- Ajouter l'IP virtuelle via le manager OVH.

- Ajouter et supprimer l'interface réseau virtuelle sur le serveur de manière dynamique (pour test).

Ajout: 

[source,bash]
---------------
ifconfig eth0:0 a.b.c.d
---------------

Suppression:

[source,bash]
---------------
ifconfig eth0:0 down
---------------

- Pour une définition persistente au reboot, déclarer l'interface dans */etc/network/interfaces* ou dans un fichier de */etc/network/interfaces.d* (Ubuntu < 17.10)

Exemple pour 2 IPs virtuelles:

[source,conf]
---------------
auto eth0:0
iface eth0:0 inet static
            address a.b.c.d
            netmask 255.255.255.255
            broadcast a.b.c.d

# Pour declarer une IP virtuelle persistante
auto eth0:1
iface eth0:1 inet static
            address e.f.g.h
            netmask 255.255.255.255
            broadcast e.f.g.h
---------------

Rem: *eth0* can be something else, for example *ens3*.

Pour prendre en compte, essayer ceci, sinon, reboot.

[source,bash]
---------------
/etc/init.d/networking restart
---------------

- Associer l'IP virtuel au serveur depuis la manager OVH.


=== Ajout d'un swap (optionnel)

Check if swap exists:

[source,bash]
---------------
swapon --summary
---------------

Ajouter un swap sur */swap/swap.img* si le disque n'est pas SSD, sinon sur le disque non SSD */mnt/sdX/swap/swap.img*. Si tous les disques sont SSD, ne pas mettre de swap.

https://www.digitalocean.com/community/tutorials/how-to-configure-virtual-memory-swap-file-on-a-vps#4


=== Création des répertoires de travail

Sur le serveur *Master* et les serveurs de *Déploiement*, créer les répertoires pour stocker les instances, les sauvegardes et les archives.

Créer les répertoires requis pour stocker les données, sauvegardes et archives:

* Créer le répertoire */mnt/diskbackup/backup*:

Si vous avez créé précedemment un disk dédié pour le backup:

[source, bash]
---------------
mkdir /mnt/diskbackup/backup
---------------

Si vous n'avez pas de disk dédié pour le backup:

[source, bash]
---------------
mkdir /mnt/diskhome/backup; chown admin /mnt/diskhome/backup;
ln -fs /mnt/diskhome/backup /mnt/diskbackup/backup
---------------

* Créer les autres répertoires:

[source,bash]
---------------
mkdir /home/jail; mkdir /mnt/diskhome/home;

mkdir /mnt/diskbackup/archives-test; mkdir /mnt/diskbackup/archives-paid
mkdir -p /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam;
chown admin.root /mnt/diskbackup/backup /mnt/diskbackup/archives-test /mnt/diskbackup/archives-paid
ln -fs /mnt/diskhome/home /home/jail/home
ln -fs /mnt/diskbackup/backup /home/jail/backup 
ln -fs /mnt/diskbackup/archives-test /home/jail/archives-test 
ln -fs /mnt/diskbackup/archives-paid /home/jail/archives-paid
---------------


=== Getting files of Dolibarr and SellYourSaas application

On all servers (*Master and Deploiement*):

* Under the *root* login, install git tool:

[source,bash]
---------------
apt install git
---------------

* Under the *admin* account, retrieve the sources of *Dolibarr* (v14 or +) to be placed in */home/admin/wwwroot/dolibarr*

[source,bash]
---------------
cd /home/admin/wwwroot
git clone https://github.com/Dolibarr/dolibarr dolibarr --branch x.y
chown -R admin.admin /home/admin/wwwroot/dolibarr
---------------

* Under login *admin*, install the sources of *SellYourSaas* : Get the sources of the project to place them into */home/admin/wwwroot/dolibarr_sellyoursaas*

[source,bash]
---------------
cd /home/admin/wwwroot
git clone https://github.com/dolicloud/sellyoursaas dolibarr_sellyoursaas
---------------


=== Creation of sellyoursaas.conf with credentials

* Créer un fichier */etc/sellyoursaas.conf* sur le serveur (sur le serveur *Master* et les *Serveurs de Déploiement*)

[source,bash]
---------------
vi /etc/sellyoursaas.conf
chown root.admin /etc/sellyoursaas.conf
chmod g-wx /etc/sellyoursaas.conf
chmod o-rwx /etc/sellyoursaas.conf
---------------

avec le contenu suivant

[source,conf]
---------------
# File /etc/sellyoursaas.conf

# domain du service
domain=mysaasdomainname.com

# If deployment server: url of subdomain for user instances
subdomain=withX.mysaasdomainname.com

# Set to 1 if this server is the master server, 
# or 2 if the ssh and mysql access are restricted to ips into /etc/sellyoursaas.d/sellyoursaas-allowed-ip.conf only
masterserver=1
# Set to 1 if this server host instances for the pool (deployment server), 
# or 2 if the ssh and mysql access are restricted to ips into /etc/sellyoursaas.d/sellyoursaas-allowed-ip.conf only
instanceserver=1
# Set to 1 if this server hosts a dns for the pool (deployment server)
dnsserver=1

# Set this to 1 or 0 to archive or not the test instances during undeployment (if 0, test are destroyed with no archive step)
archivetestinstances=1

# Set to its own IP if it is a deployment server. Keep empty for master only server.
ipserverdeployment=ip.of.deployment.server

# If deployment server: IPs allowed to request a deployment
allowed_hosts=127.0.0.1,ipofmasterserver

# email from
emailfrom=noreply@mysaasdomainname.com
# email supervision
emailsupervision=supervision@mysaasdomainname.com
# Option to use mail server of master server (for scripts system)
# usemastermailserver=1

# Set location of the master database
databasehost=ipOfMasterServer or localhost if on master server
# Set port of the master database (default is 3306)
databaseport=3306
# Set database name of the master server
database=databaseNameOnMasterServer
# Set a credential for an access to the master database (each server can have a different account to access the master database)
databaseuser=sellyoursaas
databasepass=xxxxx

# Set location of the deployment database (default is localhost)
databasehostdeployment=localhost
# Set port of the deployment database (default is 3306)
databaseportdeployment=3306
# Set credential for the deployment database (if different of master database)
databaseuserdeployment=sellyoursaas
databasepassdeployment=xxxxx

# Set compress format (gzip or zstd) (zstd need Ubuntu >= 20 or Debian >= 10)
usecompressformatforarchive=zstd

# Set this to directory where dolibarr repository is installed
dolibarrdir=/home/admin/wwwroot/dolibarr
# Set directory where instances are stored (default is /home/jail/home)
#targetdir=/home/jail/home

# Set directory where backup are stored
backupdir=/mnt/diskbackup/backup
# Set directory where archives of tests instances are stored
archivedirtest=/mnt/diskbackup/archives-test
# Set directory where archives of paid instances are stored
archivedirpaid=/mnt/diskbackup/archives-paid

# Set option to exclude some tables for some instances in backup
#backupignoretables=myinstance.withX.mysellyoursaasdomain.com:table1+table2,all:table3+table4,...
# Can set the frequency of rsync
#backuprsyncdayfrequency=1
# Can set the frequency of sql dump
#backupdumpdayfrequency=1

# Set compress format (gzip or zstd) (zstd need Ubuntu >= 20 or Debian >= 10)
usecompressformatforarchive=gzip

# Set remote server launcher ip (default is 0.0.0.0)
remoteserverlistenip=0.0.0.0
# Set remote server launcher port (default is 8080)
remoteserverlistenport=8080

remotebackupserver=ip.of.remote.backup.ssh.server
remotebackupuser=admin
remotebackupdir=/mnt/diskbackup

# Option to use different path for dataroot
#olddoldataroot=/home/admin/wwwroot/dolibarr_documents
#newdoldataroot=/new/path/of/documents
# Options to change the directory of vhostfile templates
#templatesdir=/path/of/vhostfile/templates

# Options to change the SSL certificates names in Apache virtualhost
#websslcertificatecrt=with.sellyoursaas.com.crt
#websslcertificatekey=with.sellyoursaas.com.key
#websslcertificateintermediate=with.sellyoursaas.com-intermediate.crt

# Options for Jailkit
#chrootdir=/home/jail/chroot
#privatejailtemplatename=privatejail
#commonjailtemplatename=commonjail
---------------

Mettre *masterserver* à 1, *dnsserver* et *instanceserver* à 0 sur le Master
Mettre *masterserver* à 0, *dnsserver* et *instanceserver* à 1 sur les serveurs de déploiement des instances.
Ne pas oublier de définir une valeur pour *databasepass*. On réutilisera cette valeur plus tard.


* Créer un fichier */etc/sellyoursaas-public.conf* sur le serveur (sur le serveur *Master* et les *Serveurs de Déploiement*)

[source,bash]
---------------
vi /etc/sellyoursaas-public.conf
chown root.admin /etc/sellyoursaas-public.conf
chmod a+r /etc/sellyoursaas-public.conf
chmod a-wx /etc/sellyoursaas-public.conf
---------------

avec le contenu suivant:

[source,conf]
---------------
# File /etc/sellyoursaas-public.conf

# Options for antispam system
maxemailperday=500

# Option to use a different path for spam (for public script)
#pathtospamdir=/tmp/spam
---------------


* Créer aussi le répertoire vide:

[source,conf]
---------------
mkdir -p /etc/sellyoursaas.d
---------------



=== Installation du partage nfs

Le partage NFS permettra aux serveurs de *Déploiement* de récupérer les images d'application à installer qui sont centralisées sur le 
serveur *Master*.

==== Sur le serveur Master

Installer le serveur NFS et le partage sur */home/admin/wwwroot/dolibarr_documents/sellyoursaas*
    
[source,bash]
---------------
sudo apt install nfs-kernel-server
vi /etc/exports
---------------

[source,bash]
---------------
# /etc/exports: the access control list for filesystems which may be exported
#               to NFS clients.  See exports(5).
#
# Example for NFSv2 and NFSv3:
# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)
#
# Example for NFSv4:
# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)
# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)
#
/home/admin/wwwroot/dolibarr_documents/sellyoursaas i.p.deployment.server1(ro,no_root_squash,sync,no_subtree_check)
...
/home/admin/wwwroot/dolibarr_documents/sellyoursaas i.p.deployment.serverN(ro,no_root_squash,sync,no_subtree_check)
---------------

Notez qu'il y aura dans ce fichier autant de lignes que de serveurs de déploiements.

[source,bash]
---------------
exportfs -v -a			(to validate new entries to add)
exportfs -v -r			(to validate new entries to remove)
exportfs
systemctl enable nfs-kernel-server
systemctl restart nfs-kernel-server
systemctl status nfs-kernel-server
exportfs
---------------

==== Sur les Serveurs de Déployment

Pensez à ouvir l'accès du firewall entre le client NFS (*Serveur de déploiement*) et le serveur NFS (*serveur Master*).

Installer le client NFS et faire le montage en manuel. Le montage est réalisé par défaut en NFSv4.

[source,bash]
---------------
sudo apt install nfs-common
sudo mount -t nfs i.p.server.master:/home/admin/wwwroot/dolibarr_documents/sellyoursaas /home/admin/wwwroot/dolibarr_documents/sellyoursaas
sudo umount /home/admin/wwwroot/dolibarr_documents/sellyoursaas
---------------

Ajouter la ligne au fichier */etc/fstab* pour avoir le montage automatique au reboot

[source,bash]
---------------
i.p.server.master:/home/admin/wwwroot/dolibarr_documents/sellyoursaas /home/admin/wwwroot/dolibarr_documents/sellyoursaas  nfs  defaults 0 0
---------------

et tester que ce montage se fait bien
 
[source, bash]
---------------
mount -a
---------------


=== Déploiement de la clé publique ssh du compte admin

==== Sur les serveurs de déploiement

Sur les serveurs de déploiement, copier la clé publique et privé du compte ssh *admin* du master en */home/admin/.ssh/id_rsa_sellyoursaas...* (Ce couple de fichier est celui commun pour la maintenance pour accéder aux comptes utilisateurs). Mettre les bons droits.

[source,bash]
---------------
chmod u+rw /home/admin/.ssh/id_rsa_sellyoursaas*
chmod go-rw /home/admin/.ssh/id_rsa_sellyoursaas* 
chmod a+r /home/admin/.ssh/id_rsa_sellyoursaas.pub
---------------


Compléter le fichier */home/admin/.ssh/config* pour indiquer d'utiliser cette clé publique lors d'accès à lui même ou github au lieu de *id_rsa* par défaut.

[source,bash]
---------------
Host ipserveurdeploiment
    IdentityFile /home/admin/.ssh/id_rsa_sellyoursaas
Host github.com
    IdentityFile /home/admin/.ssh/id_rsa_sellyoursaas
---------------

  
<<<<

== Installation des composants systèmes et applicatifs

=== Installation des packages

* Installation des packages Ubuntu *18.04-*

[source,bash]
---------------
sudo apt update
sudo apt install -y ntp git gzip zip zstd memcached ncdu acl
sudo apt install -y mariadb-server mariadb-client
sudo apt install -y apache2 apache2-bin lynx
sudo apt install -y php php-cli php-pear libapache2-mod-php php-fpm php-gd php-json php-ldap php-mysqlnd php-curl php-memcached php-rrd php-imagick php-geoip php-mcrypt php-intl php-zip php-bz2 php-ssh2 php-mbstring
sudo apt install -y watchdog cpulimit libapache2-mpm-itk libapache2-mod-apparmor apparmor apparmor-profiles apparmor-utils rkhunter chkrootkit
sudo apt install -y bind9
sudo apt install -y spamc spamassassin clamav clamav-daemon
sudo apt install -y fail2ban
sudo apt install -y soffice libreoffice-common libreoffice-writer
sudo apt install -y mailutils postfix
---------------

* Installation des packages Ubuntu *20.04+*

[source,bash]
---------------
sudo apt update
sudo apt install -y systemd-timesyncd git gzip zip zstd memcached ncdu acl
sudo apt install -y mariadb-server mariadb-client
sudo apt install -y apache2 apache2-bin lynx
sudo apt install -y php php-cli php-pear libapache2-mod-php php-fpm php-gd php-json php-ldap php-mysql php-curl php-memcached php-rrd php-imagick php-geoip php-intl php-zip php-bz2 php-ssh2 php-mbstring php-dev libmcrypt-dev
sudo apt install -y watchdog cpulimit libapache2-mpm-itk libapache2-mod-apparmor apparmor apparmor-profiles apparmor-utils rkhunter chkrootkit
sudo apt install -y bind9
sudo apt install -y spamc spamassassin clamav clamav-daemon
sudo apt install -y fail2ban
sudo apt install -y libreoffice-common libreoffice-writer
sudo apt install -y mailutils
---------------


=== Désactivation de la mise a jour automatique

Désinstaller le package *unattended-upgrades* au cas où il aurait été installé.

[source,bash]
---------------
apt remove unattended-upgrades
---------------


=== Augmentation taille max UID

Sur les serveurs de déploiement, modifier */etc/login.defs* pour mettre le 

[source,conf]
---------------
UID_MIN                  1000
UID_MAX                 500000

GID_MIN                  1000
GID_MAX                 500000
---------------

Modifier le fichier */etc/apache2/mods-enabled/mpm_itk.conf* (si il existe) ou */etc/apache2/conf-enabled/security.conf* (sinon) pour mettre 

[source,conf]
---------------
LimitUIDRange 1 500000
LimitGIDRange 1 500000
---------------


=== Configuration du serveur Web Apache

On active les *modules* apache pour fonctionner en MPM_PREFORK and MPM_ITK:

[source,bash]
---------------
a2enmod actions alias asis auth_basic auth_digest authn_anon authn_dbd authn_dbm authn_file authz_dbm authz_groupfile authz_host authz_owner authz_user autoindex
a2enmod cache cgid cgi charset_lite dav_fs dav dav_lock dbd deflate dir dump_io env expires ext_filter file_cache filter headers http2 ident include info ldap
a2enmod mem_cache mime mime_magic negotiation reqtimeout rewrite setenvif speling ssl status substitute suexec unique_id userdir usertrack vhost_alias 
a2enmod mpm_itk mpm_prefork
a2enmod php7.0|php7.2|php7.4|php8.1
---------------


On active les *configurations* apache pour fonctionner en MPM_PREFORK and MPM_ITK:

[source,bash]
---------------
a2enconf charset localized-error-pages other-vhosts-access-log security
---------------


Sur les serveurs de Déploiement:

* Création du répertoire des fichiers configurations des hôtes virtuels des instances.

[source,bash]
---------------
cd /etc/apache2
mkdir sellyoursaas-available sellyoursaas-online sellyoursaas-offline
ln -fs /etc/apache2/sellyoursaas-online /etc/apache2/sellyoursaas-enabled
---------------

* Sur Ubuntu 18.04 et +, vérifiez que le paramètre *PrivateTmp* est à *false* dans le fichier *apache2.service* de configuration de lancement Apache. Ceci permettra d'avoir un répertoire */tmp* non unique et isolé à chaque instance rendant possible les opérations de debug et d'analyse sur les problèmes d'envoi demails et de contrôle de Spam. Cela permet aussi aux applications web de lancer un antivirus dans un processus séparé sur les fichiers téléversés qui sont stocké dans ce répertoire temporaire.

[source,bash]
---------------
vi /etc/systemd/system/multi-user.target.wants/apache2.service
systemctl daemon-reload
/usr/sbin/apachectl stop
/usr/sbin/apachectl start
---------------

Note: Le reload d'apache ne semble pas suffisant.

* Ajout de la directive pour prendre en compte le répertoire pour les *virtual hosts* des instances utilisateurs dans la config */etc/apache2/apache2.conf*

[source,conf]
---------------
	# Include virtual host for sellyoursaas instances:
	IncludeOptional sellyoursaas-enabled/*.conf
---------------

* Ajout des directives pour définir la log par défaut des erreurs dans */etc/apache2/conf-enabled/other-vhosts-access-log.conf*

[source,conf]
---------------
ErrorLogFormat "[%v] [%{u}t] [%-m:%l] [pid %P:tid %T] %7F: %E: [client\ %a] %M% ,\ referer\ %{Referer}i"
ErrorLog ${APACHE_LOG_DIR}/other_vhosts_error.log
---------------



Sur le *Serveur Master*:

* Créer un fichier virtual host */etc/apache2/sites-available/admin.mysaasdomainname.com.conf* pour *admin.mysaasdomainname.com* sur le Dolibarr *Master* pour l'administration de SellyourSaas

[source,bash]
---------------
##########################
# Admin Dolibarr Master
##########################
<VirtualHost *:80>
        #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i"
        #php_admin_value mail.force_extra_parameters "-f postmaster@mysaasdomainname.com"
        #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i -f webmaster@mysaasdomainname.com"
        php_admin_value open_basedir /tmp/:/home/admin/wwwroot/:/usr/share/GeoIP:/home/jail/home:/home/admin/backup/dump:/home/admin/tools/

        ServerName      admin.mysaasdomainname.com
        DocumentRoot /home/admin/wwwroot/dolibarr/htdocs/
        ErrorLog     /home/admin/logs/mycompany_admin_error_log
        CustomLog    /home/admin/logs/mycompany_admin_access_log combined

        UseCanonicalName Off

        # Not sure this can help
        TimeOut 20

        KeepAlive On
        KeepAliveTimeout 5
        MaxKeepAliveRequests 20

        <Directory /home/admin/wwwroot/dolibarr/htdocs/>
        AuthType Basic
        AuthName "Authenticate to backoffice"
        AuthUserFile /etc/apache2/.htpasswd
        Require valid-user
        # Or if you prefer restrict to some ip, you can add lines "Require ip x.y.z.w" into a .conf file into this directory:
        IncludeOptional /etc/sellyoursaas.d/*.conf
        </Directory>

        #leaving /public, /api and /dav accessible to everyone
        <Directory /home/admin/wwwroot/dolibarr/htdocs/public/>
        AuthType None
        Require all granted
        Satisfy any
        </Directory>
        <Directory /home/admin/wwwroot/dolibarr/htdocs/api/>
        AuthType None
        Require all granted
        Satisfy any
        </Directory>
        <Directory /home/admin/wwwroot/dolibarr/htdocs/dav/>
        AuthType None
        Require all granted
        Satisfy any
        </Directory>
        <Files ~ "(document\.php|viewimage\.php|\.js\.php|\.js|\.css\.php|\.css|\.gif|\.png|\.svg|\.woff2|favicon\.ico)$">
        AuthType None
        Require all granted
        Satisfy any
        </Files>

        <Directory /home/admin/wwwroot>
        AllowOverride FileInfo Limit
        Options +FollowSymLinks
        Order allow,deny
        Deny from env=bad_bots
        Allow from all
        Require all granted
        </Directory>

        # Add alias git on sellyoursaas git dir
        Alias "/git" "/home/admin/wwwroot/dolibarr_documents/sellyoursaas/git"
        <Directory /home/admin/wwwroot/dolibarr_documents/sellyoursaas/git>
        AllowOverride FileInfo Limit
        Options +Indexes
        Order allow,deny
        Require ip 1.2.3.4
        </Directory>

        ExpiresActive On
        ExpiresByType image/x-icon A2592000
        ExpiresByType image/gif A2592000
        ExpiresByType image/png A2592000
        ExpiresByType image/jpeg A2592000
        ExpiresByType text/css A2592000
        ExpiresByType text/javascript A2592000
        ExpiresByType application/x-javascript A2592000
        ExpiresByType application/javascript A2592000

RewriteEngine On
RewriteCond %{SERVER_NAME} =admin.mysaasdomainname.com
RewriteCond %{REQUEST_URI} !fileserver\.php
RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
</VirtualHost>
---------------

Vous pouvez créer un autre virtual host pour le HTTPS port 443


* Créer un fichier virtual host */etc/apache2/sites-available/myaccount.mysaasdomainname.com.conf* du domaine *myaccount.mysaasdomainname.com* sur le server *Master* pour l'espace client.

[source,bash]
---------------
#########################                                                                                               
# MyAccount                                                                                        
#########################                                                                                               
<VirtualHost *:80>
   #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i"
   #php_admin_value mail.force_extra_parameters "-f postmaster@mysaasdomainname.com"
   #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i -f postmaster@mysaasdomainname.com"
   php_admin_value open_basedir /tmp/:/home/admin/wwwroot/:/usr/share/GeoIP:/home/admin/tools/

   UseCanonicalName On
   ServerName   myaccount.mysaasdomainname.com
   ErrorLog     /home/admin/logs/mysaas_myaccount_error_log
   CustomLog    /home/admin/logs/mysaas_myaccount_access_log combined

   DocumentRoot /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/myaccount

   <Directory /home/admin/wwwroot/dolibarr_sellyoursaas/myaccount>
   AllowOverride FileInfo Options
   Options       -Indexes -MultiViews +FollowSymLinks -ExecCGI
   Require all granted
   </Directory>

   # To access images
   <Directory /home/admin/wwwroot/dolibarr_documents>
   AllowOverride FileInfo Options
   Options       -Indexes -MultiViews +FollowSymLinks -ExecCGI
   Require all granted
   </Directory>

   AddOutputFilterByType DEFLATE text/html text/plain text/xml
   AddDefaultCharset utf-8

	    ExpiresActive On
	    ExpiresByType image/x-icon A2592000
	    ExpiresByType image/gif A2592000
	    ExpiresByType image/png A2592000
	    ExpiresByType image/jpeg A2592000
	    ExpiresByType text/css A2592000
	    ExpiresByType text/javascript A2592000
	    ExpiresByType application/x-javascript A2592000
	    ExpiresByType application/javascript A2592000

#RewriteEngine On
#RewriteRule !^/maintenance.php https://%{SERVER_NAME}/maintenance.php?instance=myaccount [R,L]

RewriteEngine on
RewriteCond %{SERVER_NAME} =myaccount.mysaasdomainname.com
RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
</VirtualHost>
---------------

Vous pouvez créer un autre virtual host pour le HTTPS port 443


=== Timeout des lancements de serveurs

Sur Ubuntu 18.04+ lorsque MariaDb a été migrée depuis un MySql:

Augmenter le timeout de lancement des processus car parfois les lancements de mysql/mariadb peuvent être long suite à un plantage. 
Pour cela, modifier le fichier */etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf* et mettre

[source,bash]
---------------
[Service]
TimeoutStartSec=3600s
TimeoutStopSec=3600s
---------------

Rem: Au lieu de mettre *3600s*, il est possible de mettre *infinity* (mais 3600 est préferrable)

Puis recharger la nouvelle configuration:

[source,bash]
---------------
systemctl reload nom_du_service.service
---------------


=== Installation du firewall ===

TODO Graphic avec les flux et les ports...


* Créer un firewall avec ufw

Editer le fichier */etc/ufw/before.rules* pour permettre les ping sortant, en ajoutant ceci:

[source, bash]
---------------
# allow outbound icmp
-A ufw-before-output -p icmp -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
-A ufw-before-output -p icmp -m state --state ESTABLISHED,RELATED -j ACCEPT
---------------

Puis lancer le firewall et rendez le actif à chaque lancement par:

[source, bash]
---------------
/home/admin/wwwroot/dolibarr_sellyoursaas/scripts/firewallsellyoursaasufw.sh start
---------------



=== Installation de watchdog unix (optionnel) ===

* Installation et activation de watchdog Linux avec les configs dans */etc/watchdog*

[source,bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/repair.ksh /usr/sbin/repair
---------------

Pour consulter, ne plus lancer au démarrage, lancer au démarrage, arrêter, lancer:

[source,bash]
---------------
systemctl status watchdog
systemctl disable watchdog
systemctl enable watchdog
systemctl stop watchdog
systemctl start watchdog
---------------

Lorsque la charge devient très élevée ou lorsque la mémoire est très faible, le chien de garde lancera le script de réparation qui suivra l'état du serveur dans les fichiers */var/log/repair...log* puis redémarrera le serveur. Remarque: cela ne devrait jamais arriver.


=== Installation du watchdog Apache ===

Obligatoire, nécessaire pour compenser un bug apache faisant planter apache au bout de trop de reload.

Sur les *serveurs de déploiements* :

* Installation et activation des watchdogs Apache fournis dans */home/admin/wwwroot/dolibarr_sellyoursaas/scripts/* en créant un lien par

[source,bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/apache_watchdog_launcher1.sh /etc/init.d/apache_watchdog_launcher1
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/apache_watchdog_launcher2.sh /etc/init.d/apache_watchdog_launcher2
systemctl daemon-reload

systemctl enable apache_watchdog_launcher1
systemctl is-enabled apache_watchdog_launcher1
systemctl status apache_watchdog_launcher1

systemctl enable apache_watchdog_launcher2
systemctl is-enabled apache_watchdog_launcher2
systemctl status apache_watchdog_launcher2
---------------


=== Installation de l'agent de déploiement des instances ===

Sur les *Serveurs de déploiements* :

* Installation et activation de l'agent dans */home/admin/wwwroot/dolibarr_sellyoursaas/scripts/remote_server_launcher.sh* en créant un lien par

[source,bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/remote_server_launcher.sh /etc/init.d/remote_server_launcher
systemctl daemon-reload
systemctl enable remote_server_launcher
systemctl is-enabled remote_server_launcher
systemctl status remote_server_launcher
---------------

Remarque: L'agent se lance sur le port 8080 et est en attente d'instructions du master.


Pour utiliser systemd créer un fichier /etc/systemd/system/remote-server-launcher.service :

[source,bash]
---------------
# /etc/systemd/system/remote-server-launcher.service
[Unit]
 Description=Remote Server Launcher
 RequiresMountsFor=/home/admin/wwwroot/dolibarr_documents/sellyoursaas

[Service]
 Type=forking
 ExecStart=/etc/init.d/remote_server_launcher start
 TimeoutSec=0
 StandardOutput=tty
 RemainAfterExit=yes
 Restart=on-failure

[Install]
 WantedBy=multi-user.target
---------------

La directive "RequiresMountsFor" permet d'attendre la disponibilité du répertoire où se trouve le script "remote_server_launcher.sh"

Activation du service :

[source,bash]
---------------
systemctl enable remote-server-launcher.service
systemctl start remote-server-launcher.service
systemctl status remote-server-launcher.service
systemctl stop remote-server-launcher.service
---------------


=== Installation de fail2ban ===

* Installation de fail2ban et activation des règles fail2ban suivantes:
  *apache-shellshock*, *php-url-fopen*, *pam-generic*, *postfix-sasl*, *mysqld-auth*, *xinetd-fail*
  *apache-badbots*, *apache-noscript*, *apache-overflows*, *apache-nohome*, *apache-botsearch*
  
* Ainsi que les règles spécifiques à sellyoursaas:
  
  *email-dol-blacklist*, *email-dol-perday*, *email-dol-perhour*, *email-dol-perhouradmin*, 
  *web-dol-passforgotten*, *web-dol-bruteforce*, *web-dol-registerinstance*

NOTE: Les règles disponibles peuvent varier selon la version de l'OS installé.

Pour cela, créer d'abord un fichier */etc/fail2ban/jail.local* avec ce contenu:

[source,bash]
---------------
# Fail2Ban configuration file.
#
# This file was composed for Debian systems from the original one
# provided now under /usr/share/doc/fail2ban/examples/jail.conf
# for additional examples.
#
# Comments: use '#' for comment lines and ';' for inline comments
#
# To avoid merges during upgrades DO NOT MODIFY THIS FILE
# and rather provide your changes in /etc/fail2ban/jail.local
#

# The DEFAULT allows a global definition of the options. They can be overridden
# in each jail afterwards.

[DEFAULT]
# "ignoreip" can be an IP address, a CIDR mask or a DNS host. Fail2ban will not
# ban a host which matches an address in this list. Several addresses can be
# defined using space separator.
ignoreip = 127.0.0.1/8 mybusinessips

# "bantime" is the number of seconds that a host is banned.
bantime  = 3600

# A host is banned if it has generated "maxretry" during the last "findtime"
# seconds.
findtime = 600
maxretry = 3

# "backend" specifies the backend used to get files modification.
# Available options are "pyinotify", "gamin", "polling" and "auto".
# This option can be overridden in each jail as well.
#
# pyinotify: requires pyinotify (a file alteration monitor) to be installed.
#            If pyinotify is not installed, Fail2ban will use auto.
# gamin:     requires Gamin (a file alteration monitor) to be installed.
#            If Gamin is not installed, Fail2ban will use auto.
# polling:   uses a polling algorithm which does not require external libraries.
# auto:      will try to use the following backends, in order:
#            pyinotify, gamin, polling.
backend = auto

# "usedns" specifies if jails should trust hostnames in logs,
#   warn when reverse DNS lookups are performed, or ignore all hostnames in logs
#
# yes:   if a hostname is encountered, a reverse DNS lookup will be performed.
# warn:  if a hostname is encountered, a reverse DNS lookup will be performed,
#        but it will be logged as a warning.
# no:    if a hostname is encountered, will not be used for banning,
#        but it will be logged as info.
usedns = warn

#
# Destination email address used solely for the interpolations in
# jail.{conf,local} configuration files.
destemail = supervision@mydomain.com

#
# Name of the sender for mta actions
sendername = Fail2Ban


#
# ACTIONS
#

# Default banning action (e.g. iptables, iptables-new,
# iptables-multiport, shorewall, etc) It is used to define
# action_* variables. Can be overridden globally or per
# section within jail.local file
banaction = iptables-multiport

# email action. Since 0.8.1 upstream fail2ban uses sendmail
# MTA for the mailing. Change mta configuration parameter to mail
# if you want to revert to conventional 'mail'.
mta = sendmail


[apache-shellshock]

enabled = true


[php-url-fopen]

enabled = true


[pam-generic]

enabled = true


[postfix-sasl]

# Overwrite param port since it is wrong into file jail.conf because it contains 'imap3' instead of 'imap' that does not exists
port    = smtp,465,submission,imap,imaps,pop3,pop3s
enabled = true


[sshd]

enabled = true


[xinetd-fail]

enabled = true


[apache-badbots]
# Ban hosts which agent identifies spammer robots crawling the web
# for email addresses. The mail outputs are buffered.
port     = http,https
logpath  = %(apache_access_log)s
bantime  = 172800
maxretry = 1
enabled  = true


[apache-noscript]

port     = http,https
logpath  = %(apache_error_log)s
maxretry = 6
enabled  = true


[apache-overflows]

port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2
enabled  = true


[apache-nohome]

port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2
enabled  = true


[apache-botsearch]

port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2
enabled  = true


[mysqld-auth]

port     = 3306
logpath  = /var/log/mysql/error.log
#backend  = %(mysql_backend)s
enabled = true
bantime  = 7200      ; 2 hours
findtime = 3600      ; 1 hour
maxretry = 5

---------------

NOTE: Modifier le fichier pour modifier *mybusinessips* par votre ou vos IPs séparés par des espaces ainsi que le paramètre *destemail* par l'email de supervision de votre société.


Puis placer les fichiers de règles fournis avec le projet dans *etc/fail2ban/jail.d* dans le répertoire du même nom */etc/fail2ban/jail.d* en créant un lien:

*For all servers:*

[source, bash]
---------------
cd /etc/fail2ban/jail.d
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/email-dolibarr-ruleskoblacklist.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/email-dolibarr-ruleskoquota.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/email-dolibarr-rulesko.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/email-dolibarr-rulesall.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/email-dolibarr-rulesadmin.conf
---------------

*Add also this for Master servers only:*

[source, bash]
---------------
cd /etc/fail2ban/jail.d
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/web-dolibarr-rulesregisterinstance.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/web-dolibarr-rulespassforgotten.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/web-dolibarr-rulesbruteforce.conf
---------------


Puis placer les fichiers de filtres fournis avec le projet dans *etc/fail2ban/filter.d* dans le répertoire du même nom */etc/fail2ban/filter.d* en créant un lien:

[source, bash]
---------------
cd /etc/fail2ban/filter.d
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/email-dolibarr-ruleskoblacklist.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/email-dolibarr-rulesko.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/email-dolibarr-rulesall.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/email-dolibarr-rulesadmin.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/web-dolibarr-rulesregisterinstance.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/web-dolibarr-rulespassforgotten.conf
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/etc/fail2ban/filter.d/web-dolibarr-rulesbruteforce.conf
---------------

Relancer fail2ban et vérifier les erreurs dans */var/log/fail2ban.log*

Note: If you need to have the existing log files re-parsed fully again, you must change a char at begin of file to checksum for recovery point will fails. If it fails, delete file /var/lib/fail2ban/fail2ban.sqlite3

Note: To test rule file on an existing log file:
fail2ban-regex /var/log/phpsendmail.log /etc/fail2ban/filter.d/email-dolibarr-rulesall.conf


=== Test spamassassin ===

Le process *spamd* doit tourner. Lancer le manuellement la première fois si ce n'est pas le cas.

Pour tester que le client spamassassin fonctionne, créer un fichier */tmp/testspam* avec ce contenu

    Subject: Test spam mail (GTUBE)
    Message-ID: <GTUBE1.1010101@example.net>
    Date: Wed, 23 Jul 2003 23:30:00 +0200
    From: Sender <sender@example.net>
    To: Recipient <recipient@example.net>
    Precedence: junk
    MIME-Version: 1.0
    Content-Type: text/plain; charset=us-ascii
    Content-Transfer-Encoding: 7bit

    This is the GTUBE, the
	    Generic
	    Test for
	    Unsolicited
	    Bulk
	    Email

    If your spam filter supports it, the GTUBE provides a test by which you
    can verify that the filter is installed correctly and is detecting incoming
    spam. You can send yourself a test mail containing the following string of
    characters (in upper case and with no white spaces and line breaks):

    XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X

    You should send this test mail from an account outside of your network.

Puis tester avec:

[source,bash]
---------------
spamc < /tmp/testspam
spamc -c < /tmp/testspam
echo $?
---------------


=== Test et paramétrage de ClamAV

Le process *freshclam* et *clamd* doit tourner. Lancer les manuellement la première fois si ce n'est pas le cas.

Pour tester l'outil *clamav*, créez un fichier */tmp/testvirus* avec le contenu

[source,bash]
---------------
X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*
---------------

Et pour tester *clamav* en ligne de commande et le démon:

[source,bash]
---------------
clamdscan /tmp/testvirus --fdpass
---------------

Supprimer le profil apparmor pour *usr.sbin.clamd*. Ceci est requis pour être appelé par un process web (sinon, erreur sur "getattr").

[source,bash]
---------------
aa-disable usr.sbin.clamd
ls -alrt /etc/apparmor.d/disable
service apparmor reload
service apparmor status
service apache2 stop
service apache2 start
---------------

Vous devez voir dans le statut apparmor une ligne disant que le profil *usr/sbin/clamd* est désactivée.
Rem: Il semble que l'on doit aussi redémarrer apache pour que cela s'applique dans apache.


=== Installation de Afick

* Installer afick.pl tool from the debian package found on afick web site.

[source,bash]
---------------
wget -O afick.deb https://sourceforge.net/projects/afick/files/afick/3.7.0/afick_3.7.0-1ubuntu_all.deb/download
dpkg -i afick.deb
---------------

* Commenter les ligne qui exclut les extension que l'on veut voir incluse dans l'analyse dans */etc/afick.conf* et ne garder décommenter que ces lignes ci (on veut uniquement exclure les log et backup):

[source,bash]
---------------
exclude_suffix := log LOG
exclude_suffix := tmp old bak
---------------

* Complete setup */etc/afick.conf* for section *macros* with:

[source,bash]
---------------
# used by cron job (afick_cron)
# define the mail adress to send cron job result
@@define MAILTO supervision@mysaasdomainname.com
# truncate the result sended by mail to the number of lines (avoid too long mails)
@@define LINES 1000
# REPORT = 1 to enable mail reports, =0 to disable report
@@define REPORT 1
# VERBOSE = 1 to have one mail by run, =0 to have a mail only if changes are detected
@@define VERBOSE 1
# define the nice value : from 0 to 19 (priority of the job)
@@define NICE 18
# = 1 to allow cron job, = 0 to suppress cron job
@@define BATCH 1
# if set to 0, keep all archives, else define the number of days to keep
# with the syntaxe nS , n for a number, S for the scale
# (d for day, w for week, m for month, y for year)
# ex : for 5 months : 5m
@@define ARCHIVE_RETENTION 6m
---------------

* Complete setup */etc/afick.conf* by adding at end:

[source,bash]
---------------
############################################
# to allow easier upgrade, my advice is too separate
# the default configuration file (above) from your
# local configuration (below).
# default configuration will be upgraded
# local configuration will be kept
########## put your local config below ####################
!/var/log/mysql
!/var/log/letsencrypt
!/var/log/datadog

!/etc/apache2/sellyoursaas-available
!/etc/apache2/sellyoursaas-online
!/etc/bind/archives
!/etc/bind/
!/etc/group
!/etc/group-
!/etc/gshadow
!/etc/gshadow-
!/etc/passwd
!/etc/passwd-
!/etc/shadow
!/etc/shadow-
!/etc/subgid
!/etc/subgid-
!/etc/subuid
!/etc/subuid-

/home MyRule
/home/admin/logs Logs
/var/log/datadog Logs
!/home/admin/backup
!/home/jail/home
!/home/admin/wwwroot/dolibarr_documents
!/home/admin/wwwroot/dolibarr/.git
!/home/admin/wwwroot/dolibarr_sellyoursaas/.git

!/home/admin/.bash_history
!/home/admin/.viminfo
!/home/admin/.mysql_history
!/home/myunixlogin/.bash_history
!/home/myunixlogin/.viminfo
!/home/myunixlogin/.mysql_history
!/root/.bash_history
!/root/.viminfo
!/root/.mysql_history

exclude_suffix := cache
---------------


Test que l'exécution par la crontab fonctionne correctement en lançant sous root:

[source,bash]
---------------
/etc/cron.daily/afick_cron
---------------

Ignorez si vous avez des erreurs d'envoi d'email, l'envoi d'emails est configuré plus tard.


=== Setup de cpulimit (optional)

* Launch a cpulimit daemon at startup for example with *cpulimit_daemon_launcher.sh*

[source,conf]
---------------
#!/bin/sh
#
# Script to start CPU limit daemon
#
set -e

case "$1" in
start)
if [ $(ps -eo pid,args | gawk '$3=="/usr/bin/cpulimit_daemon.sh"  {print $1}' | wc -l) -eq 0 ]; then
    nohup /usr/bin/cpulimit_daemon.sh >/dev/null 2>&1 &
    ps -eo pid,args | gawk '$3=="/usr/bin/cpulimit_daemon.sh"  {print}' | wc -l | gawk '{ if ($1 == 1) print " * cpulimit daemon started successfully"; else print " * cpulimit daemon can not be started" }'
else
    echo " * cpulimit daemon can't be started, because it is already running"
fi
;;
stop)
CPULIMIT_DAEMON=$(ps -eo pid,args | gawk '$3=="/usr/bin/cpulimit_daemon.sh"  {print $1}' | wc -l)
CPULIMIT_INSTANCE=$(ps -eo pid,args | gawk '$2=="cpulimit" {print $1}' | wc -l)
CPULIMIT_ALL=$((CPULIMIT_DAEMON + CPULIMIT_INSTANCE))
if [ $CPULIMIT_ALL -gt 0 ]; then
    if [ $CPULIMIT_DAEMON -gt 0 ]; then
        ps -eo pid,args | gawk '$3=="/usr/bin/cpulimit_daemon.sh"  {print $1}' | xargs kill -9   # kill cpulimit daemon
    fi

    if [ $CPULIMIT_INSTANCE -gt 0 ]; then
        ps -eo pid,args | gawk '$2=="cpulimit" {print $1}' | xargs kill -9                    # release cpulimited process to normal priority
    fi
    ps -eo pid,args | gawk '$3=="/usr/bin/cpulimit_daemon.sh"  {print}' | wc -l | gawk '{ if ($1 == 1) print " * cpulimit daemon can not be stopped"; else print " * cpulimit daemon stopped successfully" }'
else
    echo " * cpulimit daemon can't be stopped, because it is not running"
fi
;;
restart)
$0 stop
sleep 3
$0 start
;;
status)
ps -eo pid,args | gawk '$3=="/usr/bin/cpulimit_daemon.sh"  {print}' | wc -l | gawk '{ if ($1 == 1) print " * cpulimit daemon is running"; else print " * cpulimit daemon is not running" }'
;;
esac
exit 0
---------------


This will execute the daemon */usr/bin/cpulimit_daemon.sh*

[source,conf]
---------------
#!/bin/bash
# ==============================================================
# CPU limit daemon - set PID's max. percentage CPU consumptions
# ==============================================================

# Variables
CPU_LIMIT=40       	# Maximum percentage CPU consumption by each PID
DAEMON_INTERVAL=3  	# Daemon check interval in seconds
BLACK_PROCESSES_LIST=   # Limit only processes defined in this variable. If variable is empty (default) all violating processes are limited.
WHITE_PROCESSES_LIST=   # Limit all processes except processes defined in this variable. If variable is empty (default) all violating processes are limited.

# Check if one of the variables BLACK_PROCESSES_LIST or WHITE_PROCESSES_LIST is defined.
if [[ -n "$BLACK_PROCESSES_LIST" &&  -n "$WHITE_PROCESSES_LIST" ]] ; then    # If both variables are defined then error is produced.
   echo "At least one or both of the variables BLACK_PROCESSES_LIST or WHITE_PROCESSES_LIST must be empty."
   exit 1
elif [[ -n "$BLACK_PROCESSES_LIST" ]] ; then                                 # If this variable is non-empty then set NEW_PIDS_COMMAND variable to bellow command
   NEW_PIDS_COMMAND="top -b -n1 -c | grep -E '$BLACK_PROCESSES_LIST' | gawk '\$9>CPU_LIMIT {print \$1}' CPU_LIMIT=$CPU_LIMIT"
elif [[ -n "$WHITE_PROCESSES_LIST" ]] ; then                                 # If this variable is non-empty then set NEW_PIDS_COMMAND variable to bellow command
   NEW_PIDS_COMMAND="top -b -n1 -c | gawk 'NR>6' | grep -E -v '$WHITE_PROCESSES_LIST' | gawk '\$9>CPU_LIMIT {print \$1}' CPU_LIMIT=$CPU_LIMIT"
else
   NEW_PIDS_COMMAND="top -b -n1 -c | gawk 'NR>6 && \$9>CPU_LIMIT {print \$1}' CPU_LIMIT=$CPU_LIMIT"
fi

# Search and limit violating PIDs
while sleep $DAEMON_INTERVAL
do
   NEW_PIDS=$(eval "$NEW_PIDS_COMMAND")                                                                    # Violating PIDs
   LIMITED_PIDS=$(ps -eo args | gawk '$1=="cpulimit" {print $3}')                                          # Already limited PIDs
   QUEUE_PIDS=$(comm -23 <(echo "$NEW_PIDS" | sort -u) <(echo "$LIMITED_PIDS" | sort -u) | grep -v '^$')   # PIDs in queue

   for i in $QUEUE_PIDS
   do
       cpulimit -p $i -l $CPU_LIMIT -z &   # Limit new violating processes
   done
done
---------------

See script *cpulimit_daemon* to put into */etc/init.d*.


=== Ajouter des quotas disk par utilisateurs (optionnal)

Note: Some global quotas can be set with the *ulimit* tool in */etc/security/limits.conf* (see next chapter on ulimit)


=== Configuration de /etc/security/limits.conf (optionnel)

* Editer le fichier */etc/security/limits.conf* par exemple pour augmenter le nombre de fichiers max ouvert par processus

[source,conf]
---------------
mysql           soft     nofile           4096
mysql           hard     nofile           32768

# Set max size of block written into a file (domain is UIDstart:UIDend with UIDend empty)
#65535:           soft     fsize            1000000
#65535:           hard     fsize            1000000
---------------

Pour voir les limites:

[source,bash]
---------------
ulimit -a
---------------


=== Configuration de Postfix

Créer un fichier */etc/postfix/generic* pour ajouter la correspondance entre l'email utilisé par les envois de mails système qui ont un from vide
et l'email à utiliser qui est officiellement valide.

[source,bash]
---------------
root@myshortservername.mysaasdomainname.com		noreply@mysaasdomainname.com
admin@myshortservername.mysaasdomainname.com	noreply@mysaasdomainname.com
---------------

Compiler le fichier par:

[source,bash]
---------------
postmap /etc/postfix/generic
postmap /etc/aliases
echo >> /etc/postfix/access; postmap /etc/postfix/access
echo >> /etc/postfix/access_to; postmap /etc/postfix/access_to
echo >> /etc/postfix/access_from; postmap /etc/postfix/access_from
---------------

Editer le fichier */etc/mailname* pour mettre le nom long FQDN du serveur *myshortservername.mysaasdomainname.com*:

[source,bash]
---------------
vi /etc/mailname
---------------



Compléter le fichier */etc/postfix/main.cf* avec:

[source,bash]
---------------
smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination
myhostname = myservername.mysaasdomainname.com
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
myorigin = /etc/mailname
# mynetworks contains only localhost. Allowed external host are allowed with firewall on port 25 + because we use sasl authentication
mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
mailbox_size_limit = 204800000
recipient_delimiter = +
inet_interfaces = ip.publique.serveur.associe_au_nom_de_la_resolution_du_reverse_dns_du_serveur
inet_protocols = ipv4
smtp_generic_maps = hash:/etc/postfix/generic

# Activer ces lignes pour utiliser SendGrid comme serveur envoi pour les envois d'emails depuis les instances utilisateurs
#smtp_sasl_auth_enable = yes
#smtp_sasl_password_maps = static:apikey:abc1234567890abc12345678901234567890
#smtp_sasl_security_options = noanonymous
#smtp_tls_security_level = encrypt
#header_size_limit = 4096000
#relayhost = [smtp.sendgrid.net]:2525
# Ou mettre relayhost à vide pour utiliser le serveur local commant agent d'envoi des emails.
relayhost =

smtpd_recipient_limit = 100
smtpd_helo_required = yes
smtpd_client_connection_count_limit = 20
#deliver_lock_attempts = 10
#deliver_lock_delay = 10s
message_size_limit = 20480000

#header_checks = regexp:/etc/postfix/header_checks

# Liste des emails virtuelles
#----------------------------
#virtual_alias_maps = hash:/etc/postfix/virtual

# Liste des clients bloques
#-----------------------------
smtpd_client_restrictions = permit_sasl_authenticated, permit_mynetworks, check_client_access hash:/etc/postfix/access

# Liste des emetteurs bloques
#----------------------------
# Here we declare we want mail from specific email, mail not rejected by rbl, otherwise refused
#smtpd_sender_restrictions = permit_sasl_authenticated, permit_mynetworks, check_client_access hash:/etc/postfix/access,  check_sender_access hash:/etc/postfix/access_from, reject_non_fqdn_sender, reject_rbl_client cbl.abuseat.org, reject_rbl_client bl.spamcop.net, reject_unknown_sender_domain
smtpd_sender_restrictions = permit_sasl_authenticated, permit_mynetworks, check_client_access hash:/etc/postfix/access, check_sender_access hash:/etc/postfix/access_from, reject_non_fqdn_sender, reject_unknown_sender_domain

# Liste des recepteurs bloques
#-----------------------------
# Here we declare we want mail to my domain, to specific email with SA filtering, otherwise refuse.
smtpd_recipient_restrictions = permit_sasl_authenticated, permit_mynetworks, check_client_access hash:/etc/postfix/access, check_recipient_access hash:/etc/postfix/access_to, reject_unauth_destination

#debug_peer_list = mysaasdomainname.com, mysaasdomainname.com
#debug_peer_level = 4
#compatibility_level = 2
---------------


!!! IMPORTANT

Pensez à modifier dans */etc/postfix/main.cf*, les entrées :
 
[source,bash]
---------------
inet_interfaces = ip.publique.serveur.associe_au_nom_de_la_resolution_du_reverse_dns_du_serveur
inet_protocols = ipv4
---------------


=== Configuration de Postfix pour authentification externe SMTP sécurisée (optionnel)

En cas de besoin d'utiliser postfix depuis un accès externe (et donc authentifié)

[source,bash]
---------------
sudo apt install sasl2-bin
vi /etc/default/saslauthd  pour mettre START=yes
---------------

Vérifier que le user postfix se trouve dans le groupe *sasl*. Si non, l'ajouter par:

[source,bash]
---------------
adduser postfix sasl
---------------

Modifier le fichier */etc/postfix/master.cf* pour ajouter un 'n' afin de désactiver le chroot de smtpd

[source,bash]
---------------
smtp      inet  n       -       n       -       -       smtpd
---------------

Ajouter un fichier *smtpd.conf* dans */etc/postfix/sasl*

[source,bash]
---------------
saslauthd_path: /var/run/saslauthd/mux
pwcheck_method: saslauthd
mech_list: plain login
---------------

Pour du SMTPS, créer un certificat:
 
[source,bash]
---------------
cd /etc/postfix
openssl req -nodes -new -x509 -keyout dsfc.key -out dsfc.crt
---------------

Compléter le fichier */etc/postfix/main.cf* avec:

[source,bash]
---------------
# TLS parameters (only if you want TLS as SMTP server)
smtpd_tls_cert_file=/etc/postfix/dfsc.crt
smtpd_tls_key_file=/etc/postfix/dfsc.key
#smtpd_tls_ask_ccert = yes
#smtpd_tls_req_ccert = yes
smtpd_use_tls=yes
smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache
#smtpd_tls_auth_only = yes
#smtpd_tls_ccert_verifydepth = 1
smtpd_tls_loglevel = 1
smtpd_tls_security_level = may

#smtpd_sasl_type = dovecot
#smtpd_sasl_path = private/auth-client
#smtpd_sasl_local_domain =
# Allow SMTP AUTH
smtpd_sasl_auth_enable = yes
# Need auth
smtpd_sasl_security_options = noanonymous
broken_sasl_auth_clients = yes
---------------



=== Configuration de Mysql ou Mariadb

Sur les *Serveurs de déploiement*:

==== Configuration

Edition du fichier de config 
*/lib/systemd/system/mysql.service*   ou  */lib/systemd/system/mariadb.service*
pour mettre dans la section *[Service]* une valeur au nombre limit de fichier plus importante que la valeur de *4096* (affichable par *sudo systemctl show -p DefaultLimitNOFILE*) par défaut de systemd:

[source,bash]
---------------
LimitNOFILE=50000
Restart=no
#Restart=on-abort     # on-abort is also possible
#Restart=on-watchdog  # on-watchdog is also possible
---------------

Ceci devrait éviter les alertes du type "Could not increase number of max_open_files to more than".

Prendre en compte le changement en lançant:

[source,bash]
---------------
systemctl daemon-reload
---------------

Edition du fichier de config 
*/etc/mysql/mysql.conf.d/mysqld.cnf* (si mysql) 
ou
*/etc/mysql/mariadb.conf.d/50-server.cnf* (si mariadb)
pour changer :

[source,bash]
---------------
bind-address = 127.0.0.1
---------------

par 

[source,bash]
---------------
bind-address = 0.0.0.0
max_connections      = 500
max_user_connections = 25
# wait_timeout and interactive_timeout must be set both or none
wait_timeout         = 7200
interactive_timeout  = 7200
table_open_cache     = 10000
table_definition_cache = 8000
sort_buffer_size=2M
read_buffer_size=1M
join_buffer_size=2M
max_heap_table_size=32M
max_allowed_packet=32M
# Mysql: max_execution_time = 120000 (milliseconds) or Mariadb: max_statement_time = 120 (seconds)
#max_execution_time = 120000

innodb_buffer_pool_size=1G
innodb_buffer_pool_instances=8
innodb_file_per_table=1
innodb_log_file_size=256M
innodb_log_buffer_size=32M


[mariadb]
log_warnings = 2
---------------

Remarque: Cela peut être "listen = 0.0.0.0" au lieu de "bind-address = 0.0.0.0".


==== Définir le mot de passe mysql root

[source,bash]
---------------
SET PASSWORD FOR 'root'@'localhost' = PASSWORD('mysqlrootpassword');
-- For newer versions of mariadb, you must also do:
UPDATE mysql.user SET authentication_string = PASSWORD('mysqlrootpassword') WHERE User='root';

FLUSH PRIVILEGES;
---------------


==== Securisation du compte root (optionnel)

Afin de ne pas permettre le brut force cracking, si ce n'est pas déjà le cas, mettre le user *root* de base de donnée en authentification
depuis le compte root système uniquement (utilisation de *auth_socket* ou *unix_socket*):

For Mysql:

Le plugin est *auth_socket* et il faut l'installer manuellement. Plus d'info sur: https://dev.mysql.com/doc/refman/5.7/en/socket-pluggable-authentication.html

[source,sql]
---------------
INSTALL PLUGIN auth_socket SONAME 'unix_socket.so';
SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS;
---------------

For MariaDb: 

Le plugin est *unix_socket* and is set by default on Ubuntu OS.



Pour basculer en mode authentification par mot de passe / par compte unix socket:

For Mysql:

[source,sql]
---------------
# Identification par mot de passe
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '...';
# Identification par unix socket
ALTER USER 'root'@'localhost' IDENTIFIED WITH auth_socket;
---------------

For MariaDb:

[source,sql]
---------------
# Identification par mot de passe
update mysql.user set plugin='' where user='root' and host='localhost';
# Identification par unix socket
update mysql.user set plugin='unix_socket' where user='root' and host='localhost';
---------------


Note: Pour afficher tous les paramètres spécifiques qui ne sont pas les valeurs par défaut, on peut lancer:

[source,bash]
---------------
mysqld --print-defaults
---------------


Note: Pour effacer les plugin actifs, vider la table *plugins* de mysql. Voir le <<Lancement de mysql sans permissions>> si cela bloque le lancement du serveur si nécessaire.



[[creer_un_compte_db_sellyoursaas]]
==== Créer un utilisateur sellyoursaas pour administrer les bases des instances utilisateurs

Sur le serveur *Master* et sur chaque *Serveur de déploiement*, donner l'accès localement au compte *sellyoursaas*:

[source,sql]
---------------
CREATE USER 'sellyoursaas'@'localhost' IDENTIFIED BY '...';

GRANT CREATE USER, GRANT OPTION, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'sellyoursaas'@'localhost';

GRANT CREATE, CREATE TEMPORARY TABLES, CREATE VIEW, DROP, DELETE, INSERT, SELECT, UPDATE, ALTER, INDEX, REFERENCES, SHOW VIEW ON *.* TO 'sellyoursaas'@'localhost';

FLUSH PRIVILEGES;
---------------

Donner les droits d'accès, sur le *Master*, au compte de chaque serveur de déploiement, sur la base *dolibarr*:

[source,sql]
---------------
CREATE USER 'sellyoursaas'@'ip.server.deployment' IDENTIFIED BY '...';   (le mot de passe est celui dans /etc/sellyoursaas.conf du serveur de déploiement)

GRANT CREATE TEMPORARY TABLES, DELETE, INSERT, SELECT, UPDATE ON nom_de_base_dolibarr_master.* TO 'sellyoursaas'@'ip.server.deployment';

FLUSH PRIVILEGES;
---------------

Rem: Si le user existe déjà, pour mettre à jour le mot de passe:

[source,sql]
---------------
ALTER USER 'sellyoursaas'@'localhost' IDENTIFIED BY '...';
ou
SET PASSWORD FOR 'sellyoursaas'@'localhost' = PASSWORD('...');
ou
update mysql.user SET authentication_string = PASSWORD('...') where user  = 'sellyoursaas' and host = 'localhost';
FLUSH PRIVILEGES;
---------------

==== Créer un utilisateur pour l'administration à distance de la base (optionnel)

Donner les droits d'accès sur le serveur de base de données pour permettre l'administration à distance de toute base client:

[source,sql]
---------------
CREATE USER 'yourremotelogin'@'ip.poste.admin.distant' IDENTIFIED BY '...passwordforyourlogin...';
GRANT CREATE,CREATE TEMPORARY TABLES,CREATE VIEW,DROP,DELETE,INSERT,SELECT,UPDATE,ALTER,INDEX,LOCK TABLES,REFERENCES,SHOW VIEW ON *.* TO 'yourremotelogin'@'ip.poste.admin.distant';
FLUSH PRIVILEGES;
---------------

==== Créer un utilisateur pour la supervision (optional)

Si vous utilisez un agent de supervision comme *DataDog* pour superviser la base de donnée, créer un compte pouvant accéder localement à la base (le mot de passe est celui dans */etc/datadog-agent/conf.d/mysql.d/conf.yaml*:

[source,sql]
---------------
CREATE USER 'datadog'@'localhost' IDENTIFIED BY '...passwordfordatadog...';
GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'localhost' WITH MAX_USER_CONNECTIONS 5;
GRANT PROCESS ON *.* TO 'datadog'@'localhost';
FLUSH PRIVILEGES;
---------------


==== Mise en place de mariadb cluster en mode master-slave (optionnel, abandonné)

Sur le serveur, activer le mode MASTER en ajoutant les directives:

[source,bash]
---------------
server-id              = 1
log_bin                = /var/log/mysql/mysql-bin.log
expire_logs_days        = 10
max_binlog_size         = 100M
binlog_format           = MIXED
#binlog_do_db           = include_database_name
#binlog_ignore_db       = include_database_name
---------------

Sur l'esclave, activer la configuration pour le SLAVE en ajoutant les directives:

[source,bash]
---------------
server-id              = 100
replicate_ignore_db=mysql
replicate_ignore_db=information_schema
replicate_ignore_db=performance_schema
replicate_ignore_db=dolibarr
replicate_ignore_db=test
#replicate_do_db       = onlythedatabasestoreplicate
---------------

Sur le master, créer le compte de réplication:

[source,sql]
---------------
GRANT SUPER, RELOAD, REPLICATION SLAVE ON *.* TO 'repluser'@'%' IDENTIFIED BY 'replpass';
SHOW GRANTS FOR 'repluser'
---------------

Relancer les serveurs.

Vérifier que le SLAVE peut atteindre le master sur un host fixe et via le port 3306.

Sur le master:

[source,sql]
---------------
FLUSH TABLES WITH READ LOCK;
SHOW MASTER STATUS;
---------------

-> Récuperer les identifiants


Dumper les bases de données et le mettre sur le Slave.


Sur le slave:

[source,sql]
---------------
START SLAVE;
CHANGE MASTER TO MASTER_HOST='myservername.mycomapny.com', MASTER_USER='repluser', MASTER_PASSWORD='xxxxxxxxx', MASTER_LOG_FILE='mysqld-bin.000004', MASTER_LOG_POS=643;
---------------


Pour voir si un slave est en attente de replication du master, pour voir si le *Slave_IO_State* est à *Waiting for master to send event* et si
*Slave_IO_Running* et *Slave_SQL_Running* sont à YES et voir la dernière erreur:

[source,sql]
---------------
SHOW SLAVE STATUS;
---------------

Remarque: Le *Exec_Master_Log_Pos* Doit aussi valoir la même valeur que le SHOW MASTER STATUS sur le serveur.
Pour forcer un slave a relancer les requêtes master en suspens suite à un arrêt après erreur:

[source,sql]
---------------
STOP SLAVE;
--SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1;		-- Nb de requete en erreur à ignorer
START SLAVE;
---------------


En cas de probleme pour relance mysql slave, mettre
innodb_force_recovery = 1 dans */etc/mysql/mariadb.conf.d/50-server.cnf*
Mais à enlever pour avoir les tables en écritures à nouveau après avoir résolue le problème.


(Voir https://www.howtoforge.com/tutorial/replicating-a-master-database-using-mariadb-10/)



=== Configuration de AppArmor

Sur les *serveurs de déploiement*

Copy */bin/bash* or */bin/dash* into */bin/secureBash*  (Ce fichier shell sera positionné comme le shell pour les nouveaux utilisateur par le processus de déploiment)

[source,bash]
---------------
cp /bin/bash /bin/secureBash
---------------

Add apparmor file */etc/apparmor.d/bin.secureBash* or */etc/apparmor.d/usr.bin.secureBash* (with Ubuntu 20.04+) with this content:

[source,bash]
---------------
# Last Modified: Thu Nov 10 11:20:06 2016
#include <tunables/global>

# You must use here the real path and not the symlink path
# Example of profiles on https://gitlab.com/apparmor/apparmor/tree/master/profiles/apparmor/profiles/extras
# Doc on syntax on  https://doc.opensuse.org/documentation/leap/security/html/book-security/cha-apparmor-profiles.html

/{usr/,}bin/secureBash {
  # Warning: this comments are interpreted
  #include <abstractions/base>
  #include <abstractions/nameservice>

  deny capability setgid,
  deny capability setuid,
  deny capability sys_resource,


  deny /etc/apt/sources.list r,
  deny /etc/apt/sources.list.d/ r,
  deny /etc/default/nss r,
  deny /etc/host.conf r,
  deny /etc/hosts r,
  deny /etc/passwd r,
  deny /etc/securetty r,
  deny /etc/shadow r,
  deny /etc/sudoers r,
  deny /etc/sudoers.d/ r,
  deny /etc/sudoers.d/README r,
  deny /home/ r,
  deny /home/jail/ r,
  deny /lib/x86_64-linux-gnu/security/pam_deny.so m,
  deny /lib/x86_64-linux-gnu/security/pam_env.so m,
  deny /lib/x86_64-linux-gnu/security/pam_permit.so m,
  deny /lib/x86_64-linux-gnu/security/pam_umask.so m,
  deny /lib/x86_64-linux-gnu/security/pam_unix.so m,
  deny /proc/filesystems r,
  deny /proc/sys/kernel/ngroups_max r,
  deny /usr/bin/sudo rx,
  deny /usr/lib/sudo/sudoers.so m,
  deny /var/lib/sudo/sree1/ w,
  deny owner /var/www/ r,
  deny owner /var/www/** r,

  /etc/crontab r,
  /var/spool/cron/crontabs/** r,

  /{usr/,}bin/ r,
  /{usr/,}bin/cat rix,
  /{usr/,}bin/chmod rix,
  /{usr/,}bin/cp rix,
  /{usr/,}bin/customerCocoonBash mr,
  /{usr/,}bin/dash rix,
  /{usr/,}bin/grep rix,
  /{usr/,}bin/gzip rix,
  /{usr/,}bin/less rix,
  /{usr/,}bin/lesspipe rix,
  /{usr/,}bin/ls rix,
  /{usr/,}bin/more rix,
  /{usr/,}bin/mkdir rix,
  /{usr/,}bin/mv rix,
  /{usr/,}bin/rm rix,
  /{usr/,}bin/rmdir rix,
  /{usr/,}bin/sed rix,
  /{usr/,}bin/tar rix,
  /{usr/,}bin/uname rix,
  /dev/tty rw,
  /etc/.pwd.lock wk,
  /etc/bash.bashrc r,
  /etc/bash_completion r,
  /etc/bash_completion.d/ r,
  /etc/bash_completion.d/** r,
  /etc/clamav/clamd.conf r,
  /etc/init.d/ r,
  /etc/inputrc r,
  /etc/mailname r,
  /etc/mysql/conf.d/ r,
  /etc/mysql/conf.d/mysqld_safe_syslog.cnf r,
  /etc/mysql/conf.d/mysql.cnf r,
  /etc/mysql/conf.d/mysqldump.cnf r,
  /etc/mysql/mariadb.cnf r,
  /etc/mysql/mariadb.conf.d/ r,
  /etc/mysql/mariadb.conf.d/50-client.cnf r,
  /etc/mysql/mariadb.conf.d/50-mysql-clients.cnf r,
  /etc/mysql/mariadb.conf.d/50-mysqld_safe.cnf r,
  /etc/mysql/mariadb.conf.d/50-server.cnf r,
  /etc/mysql/my.cnf r,
  /etc/pam.d/* r,
  /etc/papersize r,
  /etc/php/7.*/apache2/conf.d/ r,
  /etc/php/7.*/apache2/conf.d/* r,
  /etc/php/7.*/cli/* r,
  /etc/php/7.*/cli/conf.d/ r,
  /etc/php/7.*/cli/conf.d/* r,
  /etc/php/7.*/fpm/conf.d/ r,
  /etc/php/7.*/fpm/conf.d/* r,
  /etc/php/7.*/mods-available/ r,
  /etc/php/7.*/mods-available/* r,
  /etc/postfix/dynamicmaps.cf r,
  /etc/postfix/main.cf r,
  /etc/profile r,
  /etc/profile.d/ r,
  /etc/profile.d/*.sh r,
  /etc/python2.7/sitecustomize.py r,
  /etc/resolv.conf r,
  /etc/ssl/openssl.cnf r,
  /etc/vim/vimrc r,
  /etc/wgetrc r,
  /etc/ImageMagick-6/ r,
  /etc/ImageMagick-6/* r,
  /opt/groovy-1.8.6/bin/ r,
  /proc/*/auxv r,
  /run/mysqld/mysqld.sock rw,
  /sbin/ r,
  /tmp/ rix,
  /tmp/** rw,
  /sys/devices/system/cpu/ r,
  /usr/bin/awk rix,
  /usr/bin/basename rix,
  /usr/bin/clamdscan rix,
  /usr/bin/clear rix,
  /usr/bin/clear_console rix,
  /usr/bin/crontab Cx -> sub_crontab,
  /usr/bin/cut rix,
  /usr/bin/dircolors rix,
  /usr/bin/dirname rix,
  /usr/bin/du rix,
  /usr/bin/env rix,
  /usr/bin/expr rix,
  /usr/bin/find rix,
  /usr/bin/git rix,
  /usr/bin/groups rix,
  /usr/bin/head rix,
  /usr/bin/id rix,
  /usr/bin/locale-check rix,
  /usr/bin/mawk rix,
  /usr/bin/mysql rix,
  /usr/bin/mysqldump rix,
  /usr/bin/passwd rix,
  /usr/bin/php rix,
  /usr/bin/php7.* rix,
  /usr/bin/python rix,
  /usr/bin/python2.7 rix,
  /usr/bin/rsync rix,
  /usr/bin/scp rix,
  /usr/bin/tail rix,
  /usr/bin/unzip rix,
  /usr/bin/vim.basic rix,
  /usr/bin/vim.nox rix,
  /usr/bin/wget rix,
  /usr/bin/zip rix,
  /usr/bin/zstd rix,
  /usr/include/python2.7/pyconfig.h r,
  /usr/lib/git-core/** rix,
  /usr/lib/openssh/sftp-server Cx -> sub_profile_sftp_server,  
  #/usr/lib/openssh/sftp-server rix,
  /usr/lib{,32,64}/** mr,
  /usr/local/bin/ r,
  /usr/local/lib/python2.7/dist-packages/ r,
  /usr/local/sbin/ r,
  /usr/sbin/ r,
  /usr/sbin/postdrop rix,
  /usr/sbin/sendmail rix,
  /usr/share/bash-completion/** rix,
  /usr/share/command-not-found/priority.txt r,
  /usr/share/command-not-found/programs.d/ r,
  /usr/share/command-not-found/programs.d/all-main.db rk,
  /usr/share/command-not-found/programs.d/all-multiverse.db rk,
  /usr/share/command-not-found/programs.d/all-universe.db rk,
  /usr/share/command-not-found/programs.d/amd64-main.db rk,
  /usr/share/command-not-found/programs.d/amd64-multiverse.db rk,
  /usr/share/command-not-found/programs.d/amd64-restricted.db rk,
  /usr/share/command-not-found/programs.d/amd64-universe.db rk,
  /usr/share/mysql/charsets/Index.xml r,
  /usr/share/pyshared/CommandNotFound/CommandNotFound.py r,
  /usr/share/pyshared/CommandNotFound/__init__.py r,
  /usr/share/pyshared/CommandNotFound/util.py r,
  /usr/share/pyshared/apport_python_hook.py r,
  /usr/share/pyshared/apt/__init__.py r,
  /usr/share/pyshared/apt/cache.py r,
  /usr/share/pyshared/apt/cdrom.py r,
  /usr/share/pyshared/apt/deprecation.py r,
  /usr/share/pyshared/apt/package.py r,
  /usr/share/pyshared/apt/progress/__init__.py r,
  /usr/share/pyshared/apt/progress/base.py r,
  /usr/share/pyshared/apt/progress/old.py r,
  /usr/share/pyshared/apt/progress/text.py r,
  /usr/share/pyshared/aptsources/__init__.py r,
  /usr/share/pyshared/aptsources/distinfo.py r,
  /usr/share/pyshared/aptsources/sourceslist.py r,
  /usr/share/pyshared/lazr.restfulclient-0.12.0-nspkg.pth r,
  /usr/share/pyshared/lazr.uri-1.0.3-nspkg.pth r,
  /usr/share/pyshared/zope.interface-3.6.1-nspkg.pth r,
  /usr/share/vim/vim*/** rix,
  /usr/share/ImageMagick-6/ r,
  /usr/share/ImageMagick-6/* r,
  /var/spool/postfix/public/pickup w,
  owner /var/spool/postfix/maildrop/ rw,
  owner /var/spool/postfix/maildrop/** rw,
  owner @{HOME}/ rwl,
  owner @{HOME}/** rwl,
  owner /home/*/home/*/** rix,
  owner /mnt/diskhome/home/** rixwlk,
  @{HOME}/dbn*/*_error.log r,			# does not work because HOME is a /home/jail/home and sftp need /mnt/diskhome/home
  /mnt/diskhome/home/osu*/dbn*/*_error.log r,
  /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/phpsendmail.php rix,
  /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/phpsendmailprepend.php rix,
  /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/ rw,
  /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/** rw,

  unix (connect),

  
  profile sub_crontab {
		# Warning: this comments are interpreted
		#include <abstractions/base>
		#include <abstractions/nameservice> 
		/usr/bin/crontab rix,
		/etc/crontab r,
		/var/spool/cron/crontabs/** r,
		
		allow owner /etc/passwd r,
  }
  
  profile sub_profile_sftp_server {
		# Warning: this comments are interpreted
		#include <abstractions/base>
		/etc/ssl/openssl.cnf r,
       /etc/nsswitch.conf r,
		
       #allow owner /etc/passwd r,
       allow /etc/passwd r,
		
		owner @{HOME}/ rwl,
		owner @{HOME}/** rwl,
		owner /home/*/home/*/** rixwlk,
		owner /mnt/diskhome/home/** rixwlk,
		@{HOME}/dbn*/*_error.log r,		# does not work because HOME is a /home/jail/home and sftp need /mnt/diskhome/home
		/mnt/diskhome/home/osu*/dbn*/*_error.log r,
  }  
}
---------------


Create an apparmor file */etc/apparmor.d/usr.sbin.apache2* with this content:

[source,bash]
---------------
# Last Modified: Wed Nov 24 16:11:33 2021
#include <tunables/global>

# You must use here the real path and not the symlink path
# Example of profiles on https://gitlab.com/apparmor/apparmor/tree/master/profiles/apparmor/profiles/extras
# Doc on syntax on  https://doc.opensuse.org/documentation/leap/security/html/book-security/cha-apparmor-profiles.html

profile apache2 /usr/{bin,sbin}/apache2 flags=(attach_disconnected) {
  #include <abstractions/base>
  #include <abstractions/nameservice>
  #include <apache2.d>
  #include <local/usr.sbin.apache2>

  capability chown,
  capability dac_override,
  capability dac_read_search,
  capability kill,
  capability net_bind_service,
  capability setgid,
  capability setuid,
  capability sys_admin,
  capability sys_tty_config,

  signal send peer=@{profile_name}//*,

  / rw,
  /** mrwlkix,


  ^DEFAULT_URI flags=(attach_disconnected) {
    #include <abstractions/apache2-common>
    #include <abstractions/base>
    #include <abstractions/php>
    #include <abstractions/postfix-common>
    #include <abstractions/user-tmp>
    #include <abstractions/openssl>

    deny /etc/passwd r,
    deny /etc/group r,

    network inet,
    network inet6,
    network unix dgram,

    /dev/tty rw,
    /etc/ImageMagick*/** rw,
    /etc/clamav/clamd.conf r,
    /etc/postfix/dynamicmaps.cf.d/ r,
    /etc/ssl/openssl.cnf rw,
    /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/ rw,
    /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/** rw,
    /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/phpsendmail.php rix,
    /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/phpsendmailprepend.php r,
    /proc/*/attr/current rw,
    /proc/loadavg r,
    /run/clamav/** rw,
    /{usr/,}bin/bash rix,
    /{usr/,}bin/cat rix,
    /{usr/,}bin/gzip rix,
    /{usr/,}bin/tar rix,
    /{usr/,}bin/uncompress rix,
    /usr/bin/clamdscan rix,
    /usr/bin/free rix,
    /usr/bin/id rix,
    /usr/bin/zip rix,
    /usr/bin/zstd rix,
    /usr/sbin/sendmail rix,
    /usr/sbin/post* rix,
    /usr/share/ImageMagick*/** rw,
    /usr/share/zoneinfo-icu/ r,
    /usr/share/zoneinfo-icu/** r,
    /usr/share/zoneinfo/ r,
    /usr/share/zoneinfo/** r,
    /var/log/apache2/access.log w,
    /var/log/apache2/access_ssl.log w,
    /var/log/apache2/error_ssl.log w,
    /var/log/apache2/other_vhosts_access.log w,
    /var/log/apache2/other_vhosts_error.log w,
    /var/log/phpmail.log w,
    /var/log/phpsendmail.log rw,
    /var/spool/postfix/public/pickup rw,
    /var/www/html/index.html r,
    owner /mnt/diskhome/home/osu*/** rw,
    owner /var/spool/postfix/maildrop/ rw,
    owner /var/spool/postfix/maildrop/** rw,
  }

  ^HANDLING_UNTRUSTED_INPUT flags=(attach_disconnected) {
    #include <abstractions/apache2-common>
    #include <abstractions/base>
    #include <abstractions/php>
    #include <abstractions/postfix-common>
    #include <abstractions/user-tmp>
    #include <abstractions/openssl>

    network inet,
    network inet6,

    capability dac_read_search,
  }

  ^sellyoursaas-instances flags=(attach_disconnected) {
    #include <abstractions/apache2-common>
    #include <abstractions/base>
    #include <abstractions/php>
    #include <abstractions/postfix-common>
    #include <abstractions/user-tmp>
    #include <abstractions/openssl>
    
    deny /etc/passwd r,
    deny /etc/group r,
    
    network inet,
    network inet6,
    network unix dgram,
    
    /dev/tty rw,
    /etc/ImageMagick*/** rw,
    /etc/clamav/clamd.conf r,
    /etc/ssl/openssl.cnf rw,
    /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/ rw,
    /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/** rw,
    /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/phpsendmail.php rix,
    /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/phpsendmailprepend.php r,
    /proc/*/attr/current rw,
    /proc/loadavg r,
    /run/clamav/** rw,
    /{usr/,}bin/bash rix,
    /{usr/,}bin/cat rix,
    /{usr/,}bin/gzip rix,
    /{usr/,}bin/tar rix,
    /{usr/,}bin/uncompress rix,
    /usr/bin/clamdscan rix,
    /usr/bin/free rix,
    /usr/bin/id rix,
    /usr/bin/zip rix,
    /usr/bin/zstd rix,
    /usr/sbin/post* rix,
    /usr/sbin/sendmail rix,
    /usr/share/ImageMagick*/** rw,
    /usr/share/zoneinfo-icu/ r,
    /usr/share/zoneinfo-icu/** r,
    /usr/share/zoneinfo/ r,
    /usr/share/zoneinfo/** r,
    /var/log/apache2/access.log w,
    /var/log/apache2/access_ssl.log w,
    /var/log/apache2/error_ssl.log w,
    /var/log/apache2/other_vhosts_access.log w,
    /var/log/apache2/other_vhosts_error.log w,
    /var/log/phpmail.log w,
    /var/log/phpsendmail.log rw,
    /var/spool/postfix/public/pickup rw,
    /var/www/html/index.html r,
    owner /mnt/diskhome/home/osu*/** rw,
    owner /var/spool/postfix/maildrop/ rw,
    owner /var/spool/postfix/maildrop/** rw,
  }
}
---------------


* Activer la règle apparmor en mode *enforce* (ou *complain*)

[source,bash]
---------------
aa-status
aa-enforce bin.secureBash
aa-status
/etc/init.d/apparmor status
---------------


* Pour recharger une règle apparmor:

[source,bash]
---------------
aa-enforce bin.secureBash
---------------


* Pour désactiver un profile

[source,bash]
---------------
apparmor_parser -v -R /etc/apparmor.d/usr.sbin.mysqld
or 
aa-disable usr.sbin.mysqld
---------------

Un redémarrage du serveur peut etre nécessaire pour prise en compte d'un changement de profils.

Tous les profils désactivés sont visible dans */etc/apparmor.d/disable*


* A revoir: Pour éviter que apparmor se relance en cas d'arrêt manuel, modifier */lib/systemd/system/apparmor.service* pour mettre *RemainAfterExit=no*

[source,bash]
---------------
RemainAfterExit=no
---------------

Puis
---------------
systemctl daemon-reload
---------------


=== Configuration de Jailkit (optionnel)

Jailkit est un ensemble d'utilitaires pour limiter les comptes d'utilisateurs à des fichiers spécifiques en utilisant chroot() et/ou des commandes spécifiques. Mettre en place un shell chroot, un shell limité à une commande spécifique, ou un démon dans une prison chroot est beaucoup plus facile et peut être automatisé à l'aide de ces utilitaires.

!! Important !!
Jailkit nécessite de modifier l'accès au répertoire /mnt/diskhome/home car il ne fonctionnera pas avec un lien symbolique

* Supprimer le lien symbolique /home/jail/home qui pointe vers /mnt/diskhome/home

[source,bash]
---------------
rm -f /home/jail/home
---------------

* Créer le répertoires home qui servira pour le montage de /mnt/diskhome/home

[source,bash]
---------------
mkdir /home/jail/home
---------------

* Créer le répertoire qui contiendra les chroot/jail des utilisateurs

[source,bash]
---------------
mkdir /mnt/diskhome/chroot
mkdir /home/jail/chroot
---------------

* Ajouter les montages des répertoires dans /etc/fstab

[source,bash]
---------------
# /home/jail/home
/mnt/diskhome/home /home/jail/home bind defaults,bind 0 0
# /home/jail/chroot
/mnt/diskhome/chroot /home/jail/chroot bind defaults,bind 0 0
---------------

* Monter les répertoires

[source,bash]
---------------
mount /home/jail/home
mount /home/jail/chroot
---------------

* Installation du package Jailkit

[source,bash]
---------------
sudo apt install jailkit
---------------

* Ajouter ceci à la fin du fichier de configuration /etc/jailkit/jk_init.ini

[source,bash]
---------------
[groups]
comment = Groups management
executables = /usr/bin/groups

[php]
comment = The PHP Interpreter and Libraries
executables = /usr/bin/php, /usr/bin/php7.4, /usr/bin/php7.3, /usr/bin/php7.2, /usr/bin/php5.6
directories = /usr/lib/php, /usr/share/php, /usr/share/php, /etc/php, /usr/share/php-geshi, /usr/share/zoneinfo
includesections = env

[env]
comment = environment variables
executables = /usr/bin/env

[mysqlclient]
comment = mysql client
executables = /usr/bin/mysql, /usr/bin/mysqldump
paths = /usr/lib/x86_64-linux-gnu/libmysqlclient.so.21
regularfiles = /etc/mysql/my.cf, /etc/mysql/conf.d/, /etc/mysql/mariadb.conf.d/
---------------

* Ajouter ceci dans le fichier de configuration /etc/jailkit/jk_chrootsh.ini

[source,bash]
---------------
[DEFAULT]
env = TERM, PATH
---------------

* Créer le répertoire qui contiendra le chroot/jail modèle qui servira pour créer les templates

[source,bash]
---------------
mkdir /home/jail/chroot/template
---------------

* Initialisation du chroot/jail avec les commandes que vous souhaitez rendre accessibles aux utilisateurs

[source,bash]
---------------
jk_init -c /etc/jailkit/jk_init.ini -j /home/jail/chroot/template extendedshell limitedshell groups sftp rsync editors git php mysqlclient
mkdir /home/jail/chroot/template/home
mkdir /home/jail/chroot/template/tmp
chmod 1777 /home/jail/chroot/template/tmp
---------------

Dans cette exemple le template commonjail.tgz servira à  créer le chroot/jail commun /home/jail/chroot/commonjail (si il n'existe pas)

et le template privatejail.tgz servira à créer les chroot/jail privés (ex. /home/jail/chroot/osuxxxxx)

* Créer vos tgz qui serviront à installer les chroot/jail privés et à réinstaller le chroot/jail commun si besoin

[source,bash]
---------------
cd /home/jail/chroot
tar czf commonjail.tgz template
tar czf privatejail.tgz template
---------------

* Déplacer vos templates dans le répertoire /sellyoursaas/scripts/templates accessible par votre serveur d'instances

[source,bash]
---------------
mv commonjail.tgz privatejail.tgz /home/admin/wwwroot/dolibarr_documents/sellyoursaas/scripts/templates/
---------------

* Modifier le fichier /etc/sellyoursaas.conf de votre serveur d'instances

[source,bash]
---------------
# Options for Jailkit
chrootdir=/home/jail/chroot
privatejailtemplatename=privatejail
commonjailtemplatename=commonjail
---------------


Ajoutez cette constante dans votre backoffice pour activer Jailkit
* SELLYOURSAAS_SSH_JAILKIT_ENABLED = 1


Une nouvelle option "SSH access type" sera disponible dans votre service (Application) :

image::config_jailkit_service.png[SSH access type]


et dans les contrats (instances) :

image::config_jailkit_contrat.png[SSH access type]


=== Autoriser la génération de vignettes aperçus PNG depuis les PDF

Supprimer la règle de désactivation du format Ghostscript PDF dans ImageMagick. Ceci permettra à ImageMagick et donc les librairies PHP de 
pouvoir fabriquer une image png d'aperçu depuis un fichier PDF.

    vi /etc/ImageMagick-6/policy.xml

Mettre en commentaire

    <!--  <policy domain="coder" rights="none" pattern="PDF" /> -->


=== Configuration du serveur DNS pour les domaines servis par le serveur Master

==== Chez le registar

Chez le registrar, mettre à jour le DNS du nom de domaine principal *mysaasdomainname.com* pour ajouter un enregistrement *A* pour 

    *admin.mysaasdomainname.com*         Domain de l'outil d'administration pointant sur l'ip du serveur Master
    *myaccount.mysaasdomainname.com*     Domain de l'outil d'administration pointant sur l'ip du serveur Master


=== Configuration du serveur DNS sur les serveurs de Déploiement

==== Chez le registar

Chez le registrar, mettre à jour le DNS du nom de domaine principal *mysaasdomainname.com* pour ajouter un enregistrement *A* pour 

    *withX.mysaasdomainname.com*          Sous domaine des instances utilisateurs pointant sur l'ip du serveur de Déploiement
    *ns1withX.mysaasdomainname.com*       Serveur DNS 1 des instances utilisateurs pointant sur l'ip du serveur de Déploiement
    *ns2withX.mysaasdomainname.com*       Serveur DNS 2 des instances utilisateurs pointant sur l'ip du serveur de Déploiement

Chez le registrar, ajouter aussi les entrées DNS des serveurs DNS de chaque domain de déploiement *withX.mysaasdomainname.com* avec les enregistrements *NS*:

    *withX.mysaasdomainname.com*       Type NS		DNS server 1 des instances clients, pointant sur la valeur *ns1withX.mysaasdomainname.com*
    *withX.mysaasdomainname.com*       Type NS		DNS server 2 des instances clients, pointant sur la valeur *ns2withX.mysaasdomainname.com*

Note: X est le numéro du serveur de déploiement.

*Optionnel (non disponible chez la plupart des registrars)*:

Ajouter les enregistrements *GLUE record* auprès du registar pour (optionnel)

    *ns1withX.mysaasdomainname.com*
    *ns2withX.mysaasdomainname.com*


==== Sur le serveur de déploiement

Nous allons créer les fichiers DNS pour permettre la résolution des noms DNS de tous les clients *.withX.mysaasdomainname.com.
Ces fichiers seront complétés à chaque nouveau déploiement.

Créer un fichier */etc/bind/withX.mysaasdomainname.com.hosts* pour le DNS *withX.mysaasdomainname.com* sur le *Serveur de Déploiement* (remplacer X par la valeur adéquate):

[source,bash]
---------------
$ttl 1d
$ORIGIN withX.mysaasdomainname.com.
@               IN     SOA     ns1withX.mysaasdomainname.com. supervision.mysaasdomainname.com. (
                2101011200       ; serial
                600              ; refresh = 10 minutes
                300              ; update retry = 5 minutes
                604800           ; expiry = 1 week
                660              ; negative ttl
                )
                NS              ns1withX.mysaasdomainname.com.
                NS              ns2withX.mysaasdomainname.com.
                IN      TXT     "v=spf1 mx ~all"

@               IN      A       ip.of.deployment.server		; ip du serveur de déploiement qui héberge les applications déployées
*               IN      A       ip.of.deployment.server		; ip du serveur de déploiement qui héberge les applications déployées

$ORIGIN withX.mysaasdomainname.com.


; entry for letsencrypt.
_acme-challenge IN	  TXT      "a-value-that-will-be-filled-later-for-lets-encrypt"


; this entry must always exists.
supervision A ip.of.server.deployment


; other sub-domain records
; here will be added entry like this one
; client1  A   ip.of.server.deployment

---------------


Ajouter une entrée dans */etc/bind/named.conf.local* pour que ce nouveau fichier soit pris en compte

[source,bash]
---------------
// mysaasdomainname.com
zone "withX.mysaasdomainname.com" {
        type master;
        file "/etc/bind/withX.mysaasdomainname.com.hosts";
        };
---------------


Créer un répertoire */etc/bind/archives*

[source,bash]
---------------
mkdir /etc/bind/archives
---------------


Vérifier que la résolution DNS se fait bien par défaut sur 127.0.0.1 en faisant:

[source,bash]
---------------
nslookup supervision.withX.mysaasdomainname.com
---------------


Si cela ne renvoie pas ko, désactiver *systemd-resolver* (voir point suivant) et créer un fichier */etc/resolv.conf* manuellement.
Désactiver *systemd-resolver* qui ajoute 127.0.0.53 comme resolver et rend bind inopérent en local:

[source,bash]
---------------
sudo systemctl disable systemd-resolved.service
sudo systemctl stop systemd-resolved
echo "nameserver 127.0.0.1" > /etc/resolv.conf
shutdown -Fr now
---------------


Do a test of DNS resolution using the local DNS server with

[source,bash]
---------------
host -a supervision.withX.mysaasdomainname.com 127.0.0.1
---------------

Cela doit renvoyer l'ip du serveur de déploiement.


Essayez ensuite en passant par un DNS exterieur comme celui de Google:

[source,bash]
---------------
nslookup supervision.withX.mysaasdomainname.com 8.8.8.8
---------------


=== Configuration de PHP

==== Securisation du répertoire des sessions PHP

Mettre les droits en *drwx-wx-wt* sur le répertoire des sessions php */dev/shm/* et/ou */var/lib/php/sessions*

[source,bash]
---------------
chmod -Rv 733 /dev/shm /var/lib/php/sessions
chmod +t /dev/shm /var/lib/php/sessions
---------------

==== Définition taille upload et durée sessions

Modifier le fichier *php.ini* (celui de *apache* et celui de *cli*) pour permettre l'upload de plus gros fichiers.

[source,bash]
---------------
upload_max_filesize = 20M

post_max_size = 25M
max_input_vars = 4000

memory_limit = 256M

session.gc_maxlifetime = 3600
session.use_strict_mode = 1 
session.use_only_cookies = 1
session.cookie_httponly = 1
session.cookie_samesite = Lax
---------------


==== Ajout du wrapper PHP pour la fonction PHP mail

Sur le *Serveur Master*:

Créer les fichiers examples références qui seront utiliser pour les fonctions antispam internes à SellYourSaas.

[source,bash]
---------------
echo >> /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam/blacklistmail;
echo >> /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam/blacklistip;
echo >> /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam/blacklistfrom;
echo >> /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam/blacklistcontent;
---------------



Sur les *Serveurs de déploiement*:

Le wrapper PHP d'envoi de mail permet d'intercepter tout mail envoyé avec PHP (afin de faire une analyse antiSpam et d'intégrer une log qui pourra être exploiter par fail2ban) avant d'envoyer le mail réellement.

Pour les *Versions de PHP inférieures à 8.1* :

Créer les liens symboliques de 2 outils de pré-processing PHP

[source,bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/phpsendmailprepend.php /usr/local/bin/
ln -fs /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/phpsendmail.php /usr/local/bin/
---------------

Pour les *Versions de PHP supérieures ou égales à 8.1* :

Créer les liens physiques de 2 outils de pré-processing PHP

[source,bash]
---------------
ln /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/phpsendmailprepend.php /usr/local/bin/
ln /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/phpsendmail.php /usr/local/bin/
---------------

Modifier le fichier *php.ini* (celui de *apache* et celui de *cli*) avec:

[source,bash]
---------------
; Automatically add files before PHP document.
; http://php.net/auto-prepend-file
auto_prepend_file = /usr/local/bin/phpsendmailprepend.php

; For Unix only.  You may supply arguments as well (default: "sendmail -t -i").
; http://php.net/sendmail-path
sendmail_path = /usr/local/bin/phpsendmail.php

; The path to a log file that will log all mail() calls. Log entries include
; the full path of the script, line number, To address and headers.
mail.log = /var/log/phpmail.log
---------------

Créer les fichier *phpmail.log* et *phpsendmail.log*:

[source,bash]
---------------
echo >> /var/log/phpmail.log
echo >> /var/log/phpsendmail.log
chown syslog.adm /var/log/phpmail.log /var/log/phpsendmail.log
chmod a+rw /var/log/phpmail.log /var/log/phpsendmail.log
---------------

Créer un répertoire pour le répertoire des fichiers blacklist utilisés par *phpsendmail.php*

[source,bash]
---------------
mkdir -p /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam;
chown admin.www-data /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local;
chmod a+rwx /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local;
---------------

Et copier les dans le répertoire local:

[source,bash]
---------------
cp -p /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam/blacklistmail /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/blacklistmail;
cp -p /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam/blacklistip /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/blacklistip;
cp -p /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam/blacklistfrom /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/blacklistfrom;
cp -p /home/admin/wwwroot/dolibarr_documents/sellyoursaas/spam/blacklistcontent /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/blacklistcontent;
chmod a+rwx /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam; chmod a+rw /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/*;

mkdir /tmp/spam;
cp -p /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/blacklistmail /tmp/spam/;
cp -p /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/blacklistip /tmp/spam/;
cp -p /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/blacklistfrom /tmp/spam/;
cp -p /home/admin/wwwroot/dolibarr_documents/sellyoursaas_local/spam/blacklistcontent /tmp/spam/;
chmod a+rwx /tmp/spam; chmod a+rw /tmp/spam/*
---------------

=== Configuration de logrotate

* Ajouter une ligne si non déjà présente dans le fichier */etc/logrotate.conf*

[source,bash]
---------------
# use the syslog group by default, since this is the owning group of /var/log.
su root syslog
---------------

* Modifier le fichier */etc/logrotate.d/apache2* pour augmenter le délai de purge à 365 jours.

[source,conf]
---------------
rotate 365
---------------

* Créer un fichier */etc/logrotate.d/logrotate_admin_log*

[source,conf]
---------------
/home/*/logs/*log {
        su root root
        notifempty
        daily
        rotate 7
        compress
        sharedscripts
        postrotate
                if [ -f "`. /etc/apache2/envvars ; echo ${APACHE_PID_FILE:-/var/run/apache2.pid}`" ]; then
                        /etc/init.d/apache2 reload > /dev/null
                fi
        endscript
}
---------------


* Créer un fichier */etc/logrotate.d/logrotate_sellyoursaas_log*

[source,conf]
---------------
/var/log/phpsendmail.log /var/log/phpmail.log {
        su root root        
        weekly
        rotate 4
        compress
        delaycompress
        missingok
        notifempty
        create 666 syslog adm
}

/var/log/remote_server.log {
        su root root
        weekly
        rotate 4
        compress
        delaycompress
        missingok
        notifempty
        create 600 root root
}

/home/admin/wwwroot/dolibarr_documents/*.log {
        su admin www-data
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 660 admin www-data
}
---------------

* Pour tester la rotation immédiatement:

[source,bash]
---------------
cd /etc/logrotate.d
logrotate -f logrotate_admin_log
logrotate -f logrotate_sellyoursaas_log
---------------


=== Configuration de journalctl

Journals are stored into */var/log/journal/* (or into memory */run/log/journal/*)

* Editer le fichier */etc/systemd/journald.conf* pour définir une taille max aux journaux systemd

[source,conf]
---------------
...
SystemMaxUse=1G
# Define max size of each file (there is 1 file per user). Default is 1/8 of SystemMaxUse.
SystemMaxFileSize=5M
...
---------------

Prendre en compte la modification:

[source,bash]
---------------
systemctl stop systemd-journald
systemctl start systemd-journald
---------------

Pour forcer le vidage d'un journal:

[source,bash]
---------------
journalctl --flush --rotate
journalctl --vacuum-size=1G
journalctl --vacuum-time=1d
---------------

Pour lire les journaux:

[source,bash]
---------------
journalctl --disk-usage
journalctl --header

journalctl -r --file user-XXX.journal
---------------


=== Désactivation ou activation de apport (optionnel, "on" recommandé)

Pour activer:

[source,bash]
---------------
sudo systemctl enable apport.service
sudo systemctl start apport.service
sudo systemctl status apport.service
---------------

Pour désactiver:

[source,bash]
---------------
sudo systemctl disable apport.service
sudo systemctl stop apport.service
sudo systemctl status apport.service
---------------

Note: Les rapports sont dans */var/crash*


=== Installer certbot (pour les certificats SSL)

[source,bash]
---------------
sudo apt remove cerbot
sudo apt install snapd
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot

# Old method was:
#cd /root
#apt install software-properties-common python-software-properties
#add-apt-repository ppa:certbot/certbot
#apt update
#apt install certbot
---------------

And to list certbot cron job:

[source,bash]
---------------
systemctl list-timers
systemctl status snap.certbot.renew.timer
---------------


[[creation_certificat_ssl]]
=== Création d'un certificat SSL wildcard pour les instances utilisateurs

Dans les commandes exemples suivantes, on utilsera X qui vaut '', 2, 3, ... (numéro du pool d'instance = numéro du serveur de déploiement).

==== Obtenir un certiticat SSL wildcard pour *.withX.mysaasdomainname.com

===== Via un fournisseur SSL

* Créer le fichier key *withX.mysaasdomainname.com.key* et csr *withX.mysaasdomainname.com.csr* ainsi:

Pour générer le fichier .key:   
    
[source,bash]
---------------
cd /etc/apache2
openssl genrsa 2048 > withX.mysaasdomainname.com.key
chmod go-r withX.mysaasdomainname.com.key
---------------

Pour générer le fichier .csr:

[source,bash]
---------------
openssl req -nodes -newkey rsa:2048 -sha256 -keyout withX.mysaasdomainname.com.key -out withX.mysaasdomainname.com.csr
---------------

Choisir:

	CN	*.withX.mysaasdomainname.com
	OU	IT
	O	The company name
	L	Paris
	S	IDF
	C	FR
	Email				Ne rien mettre !
	Challenge password		Ne rien mettre !

* Soumettre le fichier *.csr* auprès du fournisseur de certificats.

* Récupérer les certificats SSL (fichier *.crt* de certificat et de certificat intermédiaire) et les installer dans */etc/apache2*)

===== Via LetsEncrypt

* Run certbot or cerbot-auto

[source,bash]
---------------
certbot certonly --manual --preferred-challenges=dns -d "*.withX.mysaasdomainname.com"
---------------

Follow instructions to add DNS entries and validate generation.

To read generated .pem files, run

[source,bash]
---------------
openssl x509 -in fullchain.pem -text
---------------


Or if there is a wildcard certificate on a deployment server, run:

[source,bash]
---------------
certbot --manual -d '*.withX.mysaasdomainname.com' --preferred-challenges=dns certonly
Complete the DNS file /etc/bind/withX.mysaasdomainname.com.hosts with the TXT key suggested (Keep old one but remove very old one)
rndc reload withX.mysaasdomainname.com
/etc/init.d/apache2 reload
---------------

You can check that DNS update is ok with this URL
https://toolbox.googleapps.com/apps/dig/#TXT/_acme-challenge.withX.mysaasdomainname.com
or host -t txt _acme-challenge.withX.mysaasdomainname.com


==== Installer les fichiers certificats

* Créer un lien symbolique vers ces certificats avec le nom generique *withX.sellyoursaas.com.crt* et *withX.sellyoursaas.com-intermediate.crt*:

---------------
cd /etc/apache2
ln -fs /pathtomycertificate/withX.mysaasdomainname.com.key with.sellyoursaas.com.key
ln -fs /pathtomycertificate/withX.mysaasdomainname.com.crt with.sellyoursaas.com.crt
ln -fs /pathtomycertificate/withX.mysaasdomainname.com-intermediate.crt with.sellyoursaas.com-intermediate.crt
---------------

NOTE: Il s'agit ici du certificat qui sera utilisé pour les instances clients. Les certificats custom des instances seront dans */home/admin/wwwroot/dolibarr_documents/sellyoursaas/crt*

* If the file */etc/apache2/sites-available/default-ssl.conf* exists, rename it into */etc/apache2/sites-available/000-default-ssl.conf*

[source,bash]
---------------
mv /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/000-default-ssl.conf
---------------

* Editer le fichier apache du virtual host par défaut */etc/apache2/sites-available/000-default-ssl.conf* avec ce contenu:

---------------
<IfModule mod_ssl.c>
        <VirtualHost _default_:443>
                ServerAdmin webmaster@localhost

                DocumentRoot /var/www/html

                ErrorLog ${APACHE_LOG_DIR}/error_ssl.log
                CustomLog ${APACHE_LOG_DIR}/access_ssl.log combined

                #   SSL Engine Switch:
                #   Enable/Disable SSL for this virtual host.
                SSLEngine on

                #   A self-signed (snakeoil) certificate can be created by installing
                #   the ssl-cert package. See
                #   /usr/share/doc/apache2/README.Debian.gz for more info.
                #   If both key and certificate are stored in the same file, only the
                #   SSLCertificateFile directive is needed.
				  SSLCertificateFile /etc/apache2/with.sellyoursaas.com.crt
				  SSLCertificateKeyFile /etc/apache2/with.sellyoursaas.com.key
				  SSLCertificateChainFile /etc/apache2/with.sellyoursaas.com-intermediate.crt
				  SSLCACertificateFile /etc/apache2/with.sellyoursaas.com-intermediate.crt

                <FilesMatch "\.(cgi|shtml|phtml|php)$">
                                SSLOptions +StdEnvVars
                </FilesMatch>

				#
				# Allow server status reports generated by mod_status,
				# THIS IS REQUIRED FOR /usr/sbin/apachectl fullstatus
				#
				<Location /server-status>
				    SetHandler server-status
				    Order allow,deny
				    Deny from env=bad_bots
				    Allow from all
				    Require local
				</Location>
				
        </VirtualHost>
</IfModule>
---------------

Ainsi, si un utilisateur utilise une vieille URL sans virtual host, il arrivera sur la page par défaut */var/www/html/index.html*. 

* Editer la page */var/www/html/index.html* avec le contenu comme celui la:

---------------
<html>
<body>
<center>
<br>
<strong>Server (name_of_server_x)<br></strong>Sorry, there is currently no service available to this URL. May be this domain name was used in the past to host a customer instance that was definitely undeployed.<br>
You may try later or create a new instance from scratch from page <a href="https://www.mysaasdomainname.com">https://www.mysaasdomainname.com</a>.
<br>
</center>
</body>
</html>
---------------



[[installation_des_taches_cron]]
=== Installation des taches Cron

==== Sur le serveur Master

Avoir dans le cron du user *root*

[source,bash]
---------------
# m h  dom mon dow   command
# cron master and deployment root
#47 2 * * * /root/certbot-auto renew --no-self-upgrade > /var/log/letsencrypt/certbot-auto_renew.log 2>&1
10 0 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_mysql_system.sh confirm >/home/admin/logs/backup_mysql_system.log 2>&1
40 4 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_backups.sh confirm >/home/admin/logs/backup_backups.log 2>&1
00 4 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/perms.ksh >/home/admin/logs/perms.log
#40 4 4 * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/clean.sh confirm
---------------


Mettre dans le cron du user *admin*:

[source,bash]
---------------
# m h  dom mon dow   command
# cron master admin
*/10 * * * * /home/admin/wwwroot/dolibarr/scripts/cron/cron_run_jobs.php <securitykeydefinedinscheduledjobsetup> firstadmin >> /home/admin/wwwroot/dolibarr_documents/cron_run_jobs.php.log
5 5 * * 0 /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/batch_customers.php updatestatsonly >> /home/admin/logs/batch_customers-updatedatabase.log 2>&1
7 7 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/git_update_sources.sh /home/admin/wwwroot/dolibarr_documents/sellyoursaas/git >> /home/admin/logs/git_update_sources.log 2>&1
#7 7 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/git_update_sellyoursaas.sh /home/admin/wwwroot >> /home/admin/logs/git_update_sellyoursaas.log 2>&1
---------------

Note: *securitykeydefinedinscheduledjobsetup* is the value of the key you set into the setup of module *Scheduled jobs* on the Dolibarr master.

==== Sur les serveurs de Déploiement

Avoir dans le cron du user *root*

[source,bash]
---------------
# m h  dom mon dow   command
# cron master and deployment root
#47 2 * * * /root/certbot-auto renew --no-self-upgrade > /var/log/letsencrypt/certbot-auto_renew.log 2>&1
10 0 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_mysql_system.sh confirm >/home/admin/logs/backup_mysql_system.log 2>&1
30 3 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/perms.ksh >/home/admin/logs/perms.log
40 4 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_backups.sh confirm >/home/admin/logs/backup_backups.log 2>&1
#40 4 4 * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/clean.sh confirm
---------------

Mettre dans le cron du user *admin*:

[source,bash]
---------------
# m h  dom mon dow   command
# cron master and deployment admin
#7 7 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/git_update_sellyoursaas.sh /home/admin/wwwroot >> /home/admin/logs/git_update_sellyoursaas.log 2>&1
20 0 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/batch_customers.php backup >> /home/admin/logs/batch_customers-backup.log 2>&1
---------------

==== Vérifier le lancement des cron

Reprendre du fichier */etc/crontab*, les commandes pour tester le lancement de crontab journalière, hebdo et mensuelles et tester en lançant en manuel. Par exemple par:

[source,bash]
---------------
cd / && run-parts --report /etc/cron.daily
---------------



== Installation de Dolibarr

Sur tous les serveurs (*Master et Déploiement*):

* Créer un lien symbolique appelé *sellyoursaas* dans */home/admin/wwwroot/dolibarr/htdocs/custom* vers */home/admin/wwwroot/dolibarr_sellyoursaas* :

[source,bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas
---------------

* Créer un lien symoblique appelé *source* dans *myaccounts* vers */home/admin/wwwroot/dolibarr/htdocs* :

[source,bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr/htdocs /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/myaccount/source
---------------

* Créer un lien symbolique appelé *main.inc.php* dans *myaccount* vers */home/admin/wwwroot/dolibarr/htdocs/main.inc.php* :

[source,bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr/htdocs/main.inc.php /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/myaccount
---------------


Sur le *Serveur Master*:

* Activer le virtual host for admin and myaccount (nous avons créé les fichiers virtual host plus tôt):

[source,ini]
---------------
a2ensite admin.mysaasdomainname.com
a2ensite myaccount.mysaasdomainname.com
/etc/init.d/apache2 restart
---------------

* Générer le virtual host et le certificat SSL pour ces 2 sites avec letsencrypt:

[source,ini]
---------------
certbot
---------------

* Appeler l'URL pour lancer l'installation de Dolibarr. Attention: Choisissez lors de l'assistant d'installation, comme nom de répertoire document */home/admin/wwwroot/dolibarr_documents* plutôt que */home/admin/wwwroot/dolibarr/documents*

* Si vous configurez l'envoi des emails depuis le backoffice Dolibarr via un relai SMTP comme Google ou SendGrid, penser à mettre à jour les IP (v4 et v6) autorisées par le relay sur la console du service de relai SMTP avec l'IP du serveur Master. 

* Activez le module "Cron/Travaux programmés" et définissez la clé de sécurité du cron à la même valeur que ce qui a été mis en paramètre de l'appel de *cron_run_jobs.php* dans la cron de l'utilisateur *admin*.


Sur les *Serveurs de déploiement*:

* Créer un fichier */home/admin/wwwroot/dolibarr/htdocs/conf/conf.php*:

[source,ini]
---------------
sudo vi /home/admin/wwwroot/dolibarr/htdocs/conf/conf.php
---------------

et y ajouter le contenu suivant:

[source,ini]
---------------
<?php
$dolibarr_main_document_root='/home/admin/wwwroot/dolibarr/htdocs';
$dolibarr_main_data_root='/home/admin/wwwroot/dolibarr_documents';
---------------


=== Installation de Geoip2

* Installer la base de données de MaxMind:

mkdir /home/admin/tools/maxmind/ -p

Copier le GeoLite2-Country.mmdb obtenu depuis le site de maxmind.com

(ou wget https://cdn.jsdelivr.net/npm/geolite2-country@1.0.2/GeoLite2-Country.mmdb.gz)

chmod -R o-w /home/admin/tools/maxmind


Sur le *Serveur maitre* Dolibarr, activer et configurer le module GeoIP de Dolibarr pour utiliser cette base de donnée.


== Installation du plugin SellYourSaas

Sur le *Master*:

Se connecter à l'interface utilisateur de Dolibarr (https://admin.mysaasdomainname.com):

* Activer le module *SellYourSaas* et *Fournisseur*

* Créer un *Compte utilisateur générique Dolibarr* nommé "Service account for Saas anonymous" qui sera utilisé pour les accès aux données et services Dolibarr par l'espace client publique ou privée. Donner à cet utilisateur les accès suivants et uniquement les accès suivant:

** Module Agenda
*** Lires les actions
*** Créer modifier les actions
*** Lire les actions des autres
*** Créer des actions pour les autres.
** Module Banque
*** Consulter les comptes financiers
*** Créer/modifier montant/supprimer écritures bancaires
** Module Catégories
*** Consulter les catégories
** Contrats/Abonnements
*** Lire les contrats/abonnements
*** Créer modifier les contrats abonnements
*** Activer un service abonnement
*** Désactiver un service abonnement
** Module GED
*** Lire/ Récuperer les documents
*** Soumettre ou supprimer un document
** Module Factures et avoir
*** Consulter les factures
** Module Fournisseurs
*** Consulter les fournisseurs
** Module Prélèvement
*** Consulter les prélèvements
** Module Produit
*** Consulter les produits
** Module SellYourSaas
*** Read SellYourSaaS data
** Module Services
*** Consulter les services
** Module Tiers
*** Consulter les tiers liés à l'utilisateur
*** Consulter les contacts
** Module Utilisateurs et Groupes
*** Créer/modifier ses propres informations utilisateur

* Créer un *Product tag* appelé "SaaS products"

* Créer un *Third-party tag* appelé "SaaS customers" and "Saas resellers"

* Configurer le module *SellYourSaas*, à minima, les champs obligatoires (en gras).

* Créer un *Package* pour définir les applications à déployer (fichiers, config, dump de base...)

Voir le chapitre "Configuration des packages" plus loin.

* Créer un *Service* de type *Application* pour définir la politique de tarification d'un abonnement et le *Package* associé.

Voir le chapitre "Configuration des services" pour un description des champs.

* Créer éventuellement des *Services* de type *Metric*. 

Voir le chapitre "Configuration des services" pour un description des champs.

* Créer éventuellement des *Services* de type *Options*. 

Voir le chapitre "Configuration des services" pour un description des champs.


Remarque: Les services de types *Options* et *Metrics* doivent être attachés à un service de type *Application* depuis l'onglet Produit Virtuels. 

Remarque: Les URL pour réaliser les déploiements des packages de type *Applications* seront visibles dans le menu *SellYourSaas - URL de déploiement*


* Aller dans la configuration du module *Tâches planifiées* et récupérez l'instruction à ajouter dans la cron du user *admin*. Vérifiez sinon ajouter cette instruction pour que les batch de Sell-Your-Saas puissent tourner.


<<<<

== Installation d'outils externes

=== Installation de DataDog (optionnel pour supervision)

* Créer un compte DataDog.

* Installer l'agent sur le serveur par:

[source,bash]
---------------
DD_AGENT_MAJOR_VERSION=7 DD_API_KEY=YOURDATADOGAPIKEY bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
---------------


* Copier le fichier de config datadog pour superviser *mysql/mariadb*.

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/mysql.d/conf.yaml.example /etc/datadog-agent/conf.d/mysql.d/conf.yaml
---------------

Edit the file to enter the datadog password for mariadb.

* Copier le fichier de config datadog pour superviser *apache*.

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/apache.d/conf.yaml.example /etc/datadog-agent/conf.d/apache.d/conf.yaml
---------------


* Copier le fichier de config datadog pour superviser *postfix*.

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/postfix.d/conf.yaml.example /etc/datadog-agent/conf.d/postfix.d/conf.yaml
---------------

Editer le fichier pour ajouter *min_collection_interval: 300* sous *postfix_user: postfix* et sous *queues: - deferred*

Ajouter la ligne suivante dans le fichier */etc/sudoers*

[source,bash]
---------------
dd-agent ALL=(postfix) NOPASSWD:/usr/bin/find
---------------


* Copier le fichier de config datadog pour superviser *memcached*.

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/mcache.d/conf.yaml.example /etc/datadog-agent/conf.d/mcache.d/conf.yaml
---------------

Edit file to be

[source,bash]
---------------
## All options defined here are available to all instances.
#
init_config:

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Additionally, this sets the default `service` for every log source.
    #
    # service: <SERVICE>

instances:
  - url: localhost  # url used to connect to the memcached instance
---------------


* Copier le fichier de config datadog pour superviser certains *process*.

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/process.d/conf.yaml.example /etc/datadog-agent/conf.d/process.d/conf.yaml
---------------

Editer le pour suivre les process suivants:

[source,bash]
---------------
instances:
  - name: process_apache2
    search_string: ['apache2']
    exact_match: False
    thresholds:
      critical: [4, 5000]

  - name: fail2ban
    search_string: ['fail2ban-server']
    exact_match: False
    thresholds:
      critical: [1, 5000]

  - name: cron
    search_string: ['/usr/sbin/cron']
    exact_match: False
    thresholds:
      critical: [1, 5000]      
      
  - name: agent_sellyoursaas
    search_string: ['remote_server']
    exact_match: False
    thresholds:
      critical: [1, 5000]

  - name: apache_watchdog_daemon1
    search_string: ['apache_watchdog_daemon1']
    exact_match: False
    thresholds:
      critical: [1, 5000]
      
  - name: apache_watchdog_daemon2
    search_string: ['apache_watchdog_daemon2']
    exact_match: False
    thresholds:
      critical: [1, 5000]
---------------

* On *deployment servers* only, copy the datadog config file to supervize *SSL certificates*.

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/http_check.d/conf.yaml.example /etc/datadog-agent/conf.d/http_check.d/conf.yaml
---------------

Editer le pour superviser l'URL suivante:

[source,bash]
---------------
init_config:
  ## @param ca_certs - string - optional
  ## Change default path of trusted certificates
  #
  ## ca_certs: /etc/ssl/certs/ca-certificates.crt

instances:

  - name: SellYourSaas customers instances (withX)
    url: https://supervision.withX.mysaasdomain.org
    disable_ssl_validation: false
    min_collection_interval: 86400
---------------

Note: Remplacer withX par le préfix correct du serveur de déploiement.


* Relancer datadog

[source,bash]
---------------
sudo service datadog-agent stop
sudo service datadog-agent start
vi /var/log/datadog/agent.log
---------------


<<<<

== Exploitation - Supervision

=== Sauvegarde / Restauration

==== Sauvegarde système

La sauvegarde du serveur+bases peut se faire par un snapshot d'image de la VM.
Il est aussi possible de ne faire un snapshot que des disques complémentaires.

Voir chapitre <<Clonage d une instance serveur pour production bis ou pour développement>>

==== Restauration système

Depuis l'espace "Snapshots" d'OVH, on peut demander à le restaurer sur un serveur (pour une image VM) ou sur un aute disque (pour une image disque complémentaire), à condition que la cible (serveur ou disque) soit supérieure ou égale en terme de capacité de stockage.

Voir chapitre <<Clonage d une instance serveur pour production bis ou pour développement>>


==== Sauvegarde fichiers et bases

===== Sauvegarde locale

- Une sauvegarde locale de la configuration du serveur et des instances payantes est assurée par le cron

*/home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_mysql_system.sh confirm* de *root* (voir <<installation_des_taches_cron>>) vers le disque */home/admin/backup/conf* et */home/admin/backup/mysql*

- Une sauvegarde locale des instances utilisateurs payantes est assurée par le cron 

*/home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/batch_customers.php backup* de *admin* (voir <<installation_des_taches_cron>>) vers le disque */mnt/diskbackup/backup/osu*


===== Sauvegarde distante

- Une sauvegarde externe doit être assurée vers un autre serveur par le cron de l'utilisateur *root* en lançant le fichier */home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_backups.sh confirm >/home/admin/logs/backup_backups.log 2>&1* pour copier de */mnt/diskbackup/backup* vers */mnt/diskbackup/backup_serversource* (d'un autre serveur sur un autre datacenter). Ce script est intégré dans la crontab de root (Voir <<installation_des_taches_cron>>).


- Pour une sauvegarde chez AWS:

[source,bash]
---------------
pip install awscli --upgrade --user

    TODO...
---------------


=== Mise à jour des images à déployer

- Un script cron permet de réaliser le git pull nécessaire pour mettre à jour les images des packages à déployer en lançant le script sur le serveur *Master*: 
*/home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/git_update_sources.sh /home/admin/wwwroot/dolibarr_documents/sellyoursaas/git*


=== Mise à des statistiques SellYourSaas

- Un script cron permet de réaliser le calcul des statistiques en lançant le script sur le serveur *Master*: 
*/home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/batch_customers.php updatestatsonly*


=== Augmenter la taille d'un disque

* Faire le snapshot du disque à redimensionner pour sauvegarde. Créer un nouveau disque depuis ce snapshot et le rattacher à un autre serveur (voir chapitre <<ajout_de_disque>>) pour s'assurer qu'il est lisible et ainsi avoir les fichiers de la sauvegarde sous la main.

* Démonter le filesystem:

[source,bash]
---------------
umount /mnt/disk/
---------------

Rem: Pour voir les fichiers ouverts sur un disque si le démontage échoue:
	
[source,bash]
---------------
lsof | grep "/mnt/disk"
---------------

* Détacher le disque du serveur. S'assurer que son nom ne contient pas d'espaces ou caractères spéciaux. Changer la taille du disque depuis le manager du Public Cloud et le réattacher au serveur.

* Agrandir la partition en lançant: 

[source,bash]
---------------
fdisk -l
parted /dev/vdX    (X=a, b, !!! SANS le chiffre, on veut le disque complet)
print all
resizepart 
Y
999GB    (Ne pas saisir la valeur proposé par défaut mais la valeur max du disque qui a été affiché par le "print all")
q
---------------

* Remonter le disque pour prise en compte et augmenter le formatage du filesystem sans effacement.

[source,bash]
---------------
mount /mnt/disk/
resize2fs /dev/vdX9
---------------


[Clonage d une instance serveur pour production bis ou pour développement]
=== Clonage d une instance serveur pour production bis ou pour développement

Les étapes suivantes résumes les opérations à réaliser pour cloner un serveur de déploiement en un autre serveur de déploiement.

- Créer un snapshot/backup du *Serveur de déploiement* à cloner.

- Créer un nouveau serveur depuis le snapshot:

*Avec OVH*:

Créer un nouveau serveur OVH depuis le snapshot ou l'image en spécifiant le nom du snapshot source et en copiant dans la zone *post installation script* le contenu du fichier */scripts/post_inst_script.sh*

Une fois le serveur créé, vérifiez qu'il a bien un IP associé. Si non, aller dans la console horizon est sur le serveur, supprimer les interfaces réseaux (Detach) puis ajouter un interface réseaux (laisser l'ip fixe vide pour qu'elle soit déterminée par OVH). Rebooter le serveur.
Il est possible qu'il faille aussi modifier les fichiers network pour obtenir l'ip v4 en dhcp. Pour cela:
Se connecter à la console. Faire *ip link show* pour connaitre l'adresse MAC. Vérifier le fichier */etc/netplan/50-cloud-init.yaml* afin d'avoir la bonne MAC address.
Corriger et redémmarer si nécessaire. Corriger ensuite aussi pour l'ipv6.


*Avec ScaleWay*:

TODO


- Une fois le serveur prêt: Se connecter pour désactiver les crons en doublons avec le serveur cloné (possibilité de désactiver le process cron complètement) par

[source,bash]
---------------
systemctl stop cron
systemctl disable cron
systemctl status cron
---------------

- Editer la cron de *root* et de *admin* 

- Editer le fichier */etc/fstab* pour supprimer montage du/des disques données.

- Créer un snapshot du Disque de donnée.

- Créer un nouveau disque dur de donnée OVH depuis le snapshot et l'associer au serveur. Après association, il doit être visible avec la commande:

	fdisk -l

- Si on est parti sur un disque vierge, formater le nouveau disque dur de donnée. Pour cela, voir la chapitre <<ajout_de_disque>>.
  Si il s'agit d'un dique déjà formatté, voir la chapitre <<ajout_de_disque>> pour ne réaliser que les opérations de montage et d'ajout en */etc/fstab*.

- Ajouter un fichier à la racine du disque pour identifier le volume (Par exemple: DATA_MYSERVERNAME, BACKUP_MYSERVERNAME, ...). 

---------------
touch /mnt/diskhome/DATA_MYDEPLOYMENTSERVERX
---------------

- Ajouter une autorisation d'accès NFS au nouveau serveur sur le *Master*

[source,bash]
---------------
vi /etc/exports
---------------

Pour ajouter une ligne du type:

[source,bash]
---------------
/home/admin/wwwroot/dolibarr_documents/sellyoursaas i.p.deployment.server(ro,no_root_squash,sync,no_subtree_check)
---------------

[source,bash]
---------------
exportfs -v -a			(to validate new entries to add)
exportfs
systemctl restart nfs-kernel-server
---------------

- Ajouter, dans le fichier */etc/fstab* du nouveau serveur de déploiement, l'entrée pour avoir le montage NFS au démarrage.

[source,bash]
---------------
ip.server.master:/home/admin/wwwroot/dolibarr_documents/sellyoursaas /home/admin/wwwroot/dolibarr_documents/sellyoursaas  nfs  defaults 0 0
---------------

- Autoriser l'accès entre le nouveau *Serveur de déploiement* et le *Serveur master* au niveau du firewall.

Par exemple, sur le *Serveur master*:

[source,bash]
---------------
${IPTABLES} -t filter -A INPUT -p tcp -s ip.server.deployment --dport nfs -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
${IPTABLES} -t filter -A INPUT -p udp -s ip.server.deployment --dport nfs -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
${IPTABLES} -t filter -A OUTPUT -p tcp -d ip.server.deployment --sport nfs -m state --state ESTABLISHED,RELATED -j ACCEPT
${IPTABLES} -t filter -A OUTPUT -p udp -d ip.server.deployment --sport nfs -m state --state ESTABLISHED,RELATED -j ACCEPT
---------------

Et sur le *Serveur de déploiement*

Si on a IP_SERVER et IP_SERVER2 récupéré ainsi:

[source,bash]
---------------
IP_SERVER=`ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' | head -n 1`
IP_SERVER_V6=`ifconfig | grep -i global | sed -En 's/127.0.0.1//;s/.*inet6 (addr:)?\s?([^\s]+)/\2/p' | cut -d' ' -f1 | cut -d'/' -f1 `
IP_SERVER2=`ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' | sed '2 ! d'`
---------------

Il faudra ajouter:

[source,bash]
---------------
IP_SELLYOURSAAS_ADMIN=ip.server.master

${IPTABLES} -t filter -A OUTPUT -s $IP_SERVER -d $IP_SELLYOURSAAS_ADMIN -j ACCEPT
${IPTABLES} -t filter -A INPUT -s $IP_SELLYOURSAAS_ADMIN -d $IP_SERVER -j ACCEPT
if [ "x$IP_SERVER2" != "x" ]
then
        ${IPTABLES} -t filter -A OUTPUT -s $IP_SERVER2 -d $IP_SELLYOURSAAS_ADMIN -j ACCEPT
        ${IPTABLES} -t filter -A INPUT -s $IP_SELLYOURSAAS_ADMIN -d $IP_SERVER2 -j ACCEPT
fi
---------------


- Modifier le fichiers de configuration de Postfix suivant  (possibilité de désactiver postfix complètement ou juste envoyer les emails vers un SMTP bidon pour du développement):
  
  */etc/postfix/main.cf*
  */etc/postfix/mydestination*
  */etc/postfix/generic*
  */etc/mailname*

- Ajouter les entrées du nouveau serveur *mynewserverX.mydomain.com* dans le DNS du domaine *mydomain.com* avec l'IP v4 (record A) et l'IP v6 (record AAA) attribué par OVH lors de la création du nouveau serveur.

- Aller dans l'interface de gestion des serveurs OVH, pour modifier leur nom court. Ceci modifiera le fichier */etc/hostname* automatiquement (sinon modifier manuellement. Mettre un nom court, par exemple *myserverX*).

- Aller dans l'interface de gestion des IP OVH, pour ajouter aussi 
 
  - le reverse sur l'IP du nouveau serveur: *myserverX.mydomain.com*
  - le reverse sur l'IP virtuel si vous en avez pris une sur: *with.mydomain.com*
   
- Se connecter et modifier le fichier */etc/hosts* avec le nom du nouveau serveur et nouvelle ip du serveur.

- Editer le fichier */var/www/html/index.html* si il existe pour positionner le nouveau nom de serveur.

- Vérifier les fichiers */etc/network/interfaces* et */etc/network/interfaces.d/* (pour remettre à la bonne valeur les ip publiques, virtuelles et internes vrack si le vrack OVH est utilisé)

- Modifier les fichiers de serveurs virtuels Apache dans */etc/apache2/sites-enabled* pour mettre la nouvelle IP/nouveau nom.

- Déclarer l'IP pour l'envoi d'emails:
  - Si un serveur SMTP distant est utilisé (SendGrid, ...) et que vous avez restreint son utilisation à certaines IP uniquement, pensez à autoriser l'IP du nouveau serveur à ce service.
  - Ajouter les IPs du nouveau serveur dans la ou les entrées SPF du DNS (SPF a besoin d'une entrée séparée pour chaque domain utilisé *@mydomain.com* et pour chaque sous-domaines *@myserverX.mydomain.com*).

- Créer un compte *sellyoursaas* avec les permissions d'accès depuis le serveur de déploiement sur la base de donnée *dolibarr* du serveur *Master*. 

[source,sql]
---------------
CREATE USER 'sellyoursaas'@'ip.server.deployment' IDENTIFIED BY '...';   (le mot de passe est celui dans /etc/sellyoursaas.conf du serveur de déploiement)

GRANT CREATE TEMPORARY TABLES, DELETE, INSERT, SELECT, UPDATE ON nom_de_base_dolibarr_master.* TO 'sellyoursaas'@'ip.server.deployment';

FLUSH PRIVILEGES;
---------------

- Modifier le fichier */etc/sellyoursaas.conf* avec la nouvelle IP et nom de sous-domaine du nouveau pool et information du compte d'accès base de donnée du master.

- Effacer les fichiers dans :

  */etc/apache2/sellyoursaas-online*
  */etc/apache2/sellyoursaas-offline*
  */etc/apache2/sellyoursaas-available*

- Et les fichiers ayant pour nom :
  
  */var/spool/mail/osu**
  */var/spool/cron/crontabs/osu**

- Effacer les lignes osu* des fichiers

  */etc/passwd*
  */etc/shadow*
  */etc/group*
  
- Effacer les répertoires */mnt/diskhome/home/osu...* et */mnt/diskhome/backup/osu...*
  
- Détruire la base de données 

  - de *dolibarr* master si la source était le serveur *Master*.
  - des instances utilisateurs si la source était un serveur de déploiement. Ceci peut se faire en lançant:
  
[source,bash]
---------------
mysql -uroot -e "show databases" | grep dbn | gawk '{print "drop database `" $1 "`;select sleep(0.1);"}' > /tmp/dbntodelete.sql
mysql -uroot < /tmp/dbntodelete.sql
---------------
  
- Renommer le fichier DNS */etc/bind/withX.mydomain.com.hosts* en */etc/bind/with(X+1).mydomain.com.hosts* et l'éditer pour prendre en compte le nouveau prefix.

- Modifier le fichier */etc/bind/named.conf.local* pour prendre en compte le nouveau nom.

- Ajouter l'entrée DNS A pour *ns1withX*, *ns2withX* au domain *mydomain.com* pointant sur l'IP du nouveau serveur de déploiement.

- Ajouter l'entrée DNS NS pour *withX* au domain *mydomain.com* pointant sur *ns1withX.mydomain.com*.

- Relancer le serveur.

- Vérifier que, depuis le serveur Master, l'url *http://ipnouveauserverdeployment:8080/index.php/test* répond par un "404 Not Found".

- Vérifier que les répertoires existent avec les bons droits ou les forcer: 

[source,bash]
---------------
mkdir /mnt/diskbackup/backup /mnt/diskbackup/archives-test /mnt/diskbackup/archives-paid;
chown admin.root /mnt/diskbackup/backup /mnt/diskbackup/archives-test /mnt/diskbackup/archives-paid;
---------------

- Acquerir les certificats SSL du nouveau nom de domaine *withX.mydomain.com*, les déposer sur le serveur
et créer les liens symboliques (Voir <<creation_certificat_ssl>>).

- Si vous configurez l'envoi des emails depuis le backoffice Dolibarr via un relai SMTP comme Google et/ou SendGrid, pensez à mettre à jour les IP (v4 et v6) autorisées par le relay sur la console du relai. 

En complément, si d'autres applications étaient actives sur le serveur clonés:

* For Prestashop sites, if the new server has a new url:
** go into database to set correct url into table *ps_configuration* (var PS_SHOP_DOMAIN, PS_SHOP_DOMAIN_SSL, CANONICAL_URL) and *ps_shop_url*
** remove all cache files: cd cache; rm -fr **; cd themes/xxx/cache; rm -fr **;
** check also that templates does not contains hard coded redirect like "<a href="http{if Tools::usingSecureMode()}s{/if}://dev.dolistore.com" title="{$shop_name|escape:'html':'UTF-8'}">
** change payment modules from Live to Test if the copy is for development

* For Mediawiki sites, if VM has a new url, go into database to set correct url into file *LocalSettings.php*


=== Upgrade OS

Pour mettre à jour Ubuntu 16.04 vers 18.04 sur un serveur SellYourSaas:

[source,sql]
---------------
apt dist-upgrade

apt install php-mysql
a2enmod php7.2
apt remove php-fpm php7-fpm
---------------


[[check_database_used]]
=== Suivi espace utilisé en base mysql / mariadb

La requête suivante permet d'avoir une vision de l'espace réél (sans le gachis) en base de données.

[source,sql]
---------------
show variables like 'innodb_stats_on_metadata';
SET GLOBAL innodb_stats_on_metadata=0;
SELECT table_schema "DB Name", ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) "DB Size in MB",
SUM(data_length) "Data", SUM(index_length) "Index"  FROM information_schema.tables 
WHERE table_schema LIKE 'dbna%'
GROUP BY table_schema;
---------------

Et par table

[source,sql]
---------------
show variables like 'innodb_stats_on_metadata';
SET GLOBAL innodb_stats_on_metadata=0;
SELECT table_schema "DB Name", table_name, ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) "DB Size in MB",
SUM(data_length) "Data", SUM(index_length) "Index"  FROM information_schema.tables 
WHERE table_schema LIKE 'dbna%'
GROUP BY table_schema, table_name;
---------------

or old request:

[source,sql]
---------------
SELECT IFNULL(B.engine,'Total') "Storage Engine",
CONCAT(LPAD(REPLACE(FORMAT(B.DSize/POWER(1024,pw),3),',',''),17,' '),' ',
SUBSTR(' KMGTP',pw+1,1),'B') "Data Size", CONCAT(LPAD(REPLACE(
FORMAT(B.ISize/POWER(1024,pw),3),',',''),17,' '),' ',
SUBSTR(' KMGTP',pw+1,1),'B') "Index Size", CONCAT(LPAD(REPLACE(
FORMAT(B.TSize/POWER(1024,pw),3),',',''),17,' '),' ',
SUBSTR(' KMGTP',pw+1,1),'B') "Table Size"
FROM (SELECT engine,SUM(data_length) DSize,SUM(index_length) ISize,
SUM(data_length+index_length) TSize FROM information_schema.tables
WHERE table_schema NOT IN ('mysql','information_schema','performance_schema')
AND engine IS NOT NULL GROUP BY engine WITH ROLLUP) B,
(SELECT 3 pw) A ORDER BY TSize;
---------------


=== Consultation des deadlocks de la base de données

[source,bash]
---------------
echo "show engine innodb status" | mysql  | sed 's/\\n/\n/g' > /tmp/innodbstatus
---------------

[source,sql]
---------------
kill query ...
kill ...
---------------



=== Suivi des fichiers modifiés

Pour détecter la liste des fichiers modifiés depuis la dernière mise à jour afick:

[source,bash]
---------------
afick.pl -k
---------------

Voir le résumé des historiques de chaque changements:

[source,bash]
---------------
vi /var/lib/afick/history
---------------

Voir le détail des changements d'un jour:

[source,bash]
---------------
vi /var/lib/afick/archive/afick.YYYMMDD*
---------------

Voir la documentation *afick.pl* pour plus d'options.


=== Restore a lost config file of a package

Launch this command to find the package that provide the file:

[source,bash]
---------------
dpkg -S '/path/to/file'
---------------

Then launch a commande to restore file:

[source,bash]
---------------
sudo apt install --reinstall -o Dpkg::Options::="--force-confmiss" <package-name>
or
sudo apt install --reinstall -o Dpkg::Options::="--force-confask,confnew,confmiss" <package-name>
---------------


=== Utilisation de OpenStack pour gérer les images de serveurs

- Installer les utilitaires OpenStack

[source,bash]
---------------
apt install python3-openstackclient python3-novaclient python3-glanceclient -y
---------------

- Créer un compta API OpenStack Horizon et récupérer le fichier RC OpenStack v3. Lancer le.

[source,bash]
---------------
source openrc.sh
---------------

- Les commandes openstack sont alors disponibles.

Pour récupérer une image d'instance:

[source,bash]
---------------
nova list
nova image-create aaa115b3-83df-4375-b2ee-19339041dcfa image-myfile-server1
glance image-list
   ou   openstack image list
glance image-download --file image-myfile-server1.qcow2 aaab785d-8a34-40f5-bdcd-0a3c3c350c5a   
   ou   openstack image save --file image-myfile-server1.qcow2 aaab785d-8a34-40f5-bdcd-0a3c3c350c5a
---------------

Pour pousser une image d'instance sur un projet:

[source,bash]
---------------
source openrctarget.sh
export OS_REGION_NAME=SBG1
glance image-create --name nom_image_snaphot_new_server --disk-format qcow2 --container-format bare --file mon_fichier_snap_serveur1.qcow2
---------------

Pour récupérer une image de volume, il faut d'abord la créer depuis le volume détaché (Pas de possibilité de faire depuis un snapshot):

[source,bash]
---------------
openstack volume list
...Then detach the volume from its server...
openstack image create --disk-format qcow2 --container-format bare --volume 673b0ad9-1fca-485c-ae2b-8ee271b71dc7 nom_image_snaphot_new_volume

...wait until the copy is finished...

openstack image list

openstack image save --file nom_image_snaphot_new_volume.qcow2 8625f87e-8248-4e62-a0ce-a89c7bd1a9be
---------------

Pour pousser une image sur un projet:

[source,bash]
---------------

---------------

- Pour recréer un serveur depuis une image

Voir chapitre <<Clonage d une instance serveur pour production bis ou pour développement>>


=== Passage en mode rescue d'un serveur

Aller sur l'interface du service Cloud pour passer en mode rescue. Le serveur sera rebooté et un lien pour se logué sera fourni.

Trouver les disques attachées et montez le disque système.

[source,bash]
---------------
lsblk
mount /dev/sdXY /mnt
---------------

Il est alors possible d'agir sur le disque en écriture accessible dans /mnt


=== Déplacement de la base de données (var/lib/mysql vers /mnt/diskhome/mysql/)

From the MySQL prompt, select the data directory:

mysql -uroot

select @@datadir;

+-----------------+
| @@datadir       |
+-----------------+
| /var/lib/mysql/ |
+-----------------+
1 row in set (0.00 sec)

This output confirms that MySQL is configured to use the default data directory, /var/lib/mysql/, so that’s the directory we need to move. Once you’ve confirmed this, type exit and press “ENTER” to leave the monitor:

exit

To ensure the integrity of the data, we’ll shut down MySQL before we actually make changes to the data directory:

sudo systemctl stop mysqld

systemctl doesn’t display the outcome of all service management commands, so if you want to be sure you’ve succeeded, use the following command:

sudo systemctl status mysqld

You can be sure it’s shut down if the final line of the output tells you the server is stopped like in this example:

...
Jul 18 11:24:20 ubuntu-512mb-nyc1-01 systemd[1]: Stopped MySQL Community Server.

Now that the server is shut down, we’ll copy the existing database directory to the new location with rsync. Using the -a flag preserves the permissions and other directory properties, while-v provides verbose output so you can follow the progress.

Note: Be sure there is no trailing slash on the directory, which may be added if you use tab completion. When there’s a trailing slash, rsync will dump the contents of the directory into the mount point instead of transferring it into a containing mysql directory:

sudo rsync -av /var/lib/mysql /mnt/volume-nyc1-01
Once the rsync is complete, rename the current folder with a .bak extension and keep it until we’ve confirmed the move was successful. By re-naming it, we’ll avoid confusion that could arise from files in both the new and the old location:

sudo mv /var/lib/mysql /var/lib/mysql.bak
Now we’re ready to turn our attention to configuration.

Step 2 — Pointing to the New Data Location
MySQL has several ways to override configuration values. By default, the datadir is set to /var/lib/mysql in the /etc/my.cnf file. Edit this file to reflect the new data directory:

sudo vi /etc/my.cnf
Find the line in the [mysqld] block that begins with datadir=, which is separated from the block heading with several comments. Change the path which follows to reflect the new location. In addition, since the socket was previously man mlocated in the data directory, we’ll need to update it to the new location:

[source,bash]
---------------
vi /etc/my.cnf
[mysqld]
datadir=/mnt/volume-nyc1-01/mysql
socket=/mnt/volume-nyc1-01/mysql/mysql.sock
---------------

After updating the existing lines, we’ll need to add configuration for the mysql client. Insert the following settings at the bottom of the file so it won’t split up directives in the [mysqld] block:

[source,bash]
---------------
vi /etc/my.cnf
[client]
port=3306
socket=/mnt/volume-nyc1-01/mysql/mysql.sock
---------------
When you’re done, hit ESCAPE, then type :wq! to save and exit the file.

Step 3 — Restarting MySQL
Now that we’ve updated the configuration to use the new location, we’re ready to start MySQL and verify our work.

sudo systemctl start mysqld
sudo systemctl status mysqld
To make sure that the new data directory is indeed in use, start the MySQL monitor.

mysql -u root -p
Look at the value for the data directory again:

select @@datadir;
Output
+----------------------------+
| @@datadir                  |
+----------------------------+
| /mnt/volume-nyc1-01/mysql/ |
+----------------------------+
1 row in set (0.01 sec)
Now that you’ve restarted MySQL and confirmed that it’s using the new location, take the opportunity to ensure that your database is fully functional. Once you’ve verified the integrity of any existing data, you can remove the backup data directory with sudo rm -Rf /var/lib/mysql.bak.


!!!!! Sur Ubuntu 18.04
Ajouter */mnt/diskhome/mysql* dans les profiles apparmor qui contiennent */var/lib/mysql* (fichier */etc/apparmor.d/usr.sbin.mysqld*)

[source,bash]
---------------
# ADD For SellYourSaas. It allows also to move mysql dir into /mnt/diskhome if required. 
  /proc/*/status r,
  /sys/devices/system/node/ r,
  /sys/devices/system/node/node*/meminfo r,
  /sys/devices/system/node/*/* r,
  /sys/devices/system/node/* r,
  /mnt/diskhome/mysql/ r,
  /mnt/diskhome/mysql/** rwk,
---------------


Recharger le profile apparmor

[source,bash]
---------------
aa-enforce usr.sbin.mysqld
---------------



[[special_start_mysql_mariadb]]
=== Lancement spéciaux de mysql ou mariadb

* Sans permissions :

[source,bash]
---------------
sudo mkdir -p /var/run/mysqld; 
sudo chown mysql /var/run/mysqld; 
sudo mysqld_safe --skip-grant-tables &
---------------

* Avec un mode different de recovery, modifier le fichier server.conf pour mettre 1, 2, 3, 4

[source,bash]
---------------
### RECOVERY
innodb_force_recovery=1
---------------

A partir de 3 ou +, risque de perte de données.


NOTE: Si le lancement est long, pour suivre l'état d'avancement, faire un 

[source,bash]
---------------
lsof -p PID_de_mysql 
---------------
pour voir les fichiers et bases traitées en relog. Ils sont ouverts par ordre de dates sur le disque.



=== Désactivation de toutes les instances utilisateurs

Utiliser le script *make_instance_offline.sh* qui désactivera tous les accès en remplaçant chaque virtual host par un virtual host réalisant une redirection sur une page d'attente.

Le même script peut etre utilisé pour l'opération inverse.

[source,bash]
---------------
scripts/make_instance_offline.sh  https://myaccount.mydomain.com/offline.php  test|offline|online
---------------



=== Nettoyage fichiers debris

Lancer le script: 

[source,bash]
---------------
/home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/clean.sh confirm
---------------



<<<<

== Principe de fonctionnement de SellYourSaas

=== Configuration des packages

Aller dans le menu *SellYourSaas - Packages* et créer un nouveau package.

Par exemple, pour déployer une application comme *Dolibarr* dont les sources ont été placées dans le répertoire *documents/sellyoursaas/git*, saisissez les valeurs de champs suivants (Note: Les variables __XXX__ sont des mots réservés qui seront remplacés par les process de SellYourSaas qui exploitent ces champs):


Dans le champ *Dir with sources 1*

[source,bash]
---------------
__DOL_DATA_ROOT__/sellyoursaas/git/dolibarr_10.0/htdocs
---------------

Dans le champ *Dir with sources 2*

[source,bash]
---------------
__DOL_DATA_ROOT__/sellyoursaas/git/dolibarr_10.0/htdocs/install/doctemplates
---------------

Dans le champ *Dir with sources 3*

[source,bash]
---------------
__DOL_DATA_ROOT__/sellyoursaas/git/dolibarr_10.0/scripts
---------------

Dans *Target relative dir for sources 1*

[source,bash]
---------------
__INSTANCEDIR__/htdocs
---------------
	
Dans *Target relative dir for sources 2*

[source,bash]
---------------
__INSTANCEDIR__/documents/doctemplates
---------------

Dans *Target relative dir for sources 3*

[source,bash]
---------------
__INSTANCEDIR__/scripts
---------------

Dans le champ *Template of config file 1*:

[source,bash]
---------------
<?php
//
// File generated by SellYourSaas
//
// Take a look at conf.php.example file for an example of conf.php file
// and explanations for all possibles parameters.
//
$dolibarr_main_url_root='https://__APPDOMAIN__/';
$dolibarr_main_document_root='__INSTANCEDIR__/htdocs';
$dolibarr_main_url_root_alt='/custom';
$dolibarr_main_document_root_alt='__INSTANCEDIR__/htdocs/custom';
$dolibarr_main_data_root='__INSTANCEDIR__/documents';
$dolibarr_main_db_host='127.0.0.1';
$dolibarr_main_db_port='3306';
$dolibarr_main_db_name='__DBNAME__';
$dolibarr_main_db_user='__DBUSER__';
$dolibarr_main_db_pass='__DBPASSWORD__';
$dolibarr_main_db_type='mysqli';
$dolibarr_main_db_character_set='utf8';
$dolibarr_main_db_collation='utf8_unicode_ci';
$dolibarr_main_authentication='dolibarr';
//$dolibarr_main_authentication='dolibarr'; // Use forceuser for forced user
//$dolibarr_auto_user='xxx';

// Specific settings
$dolibarr_main_prod='1';
$dolibarr_nocsrfcheck='0';
$dolibarr_main_force_https='0';
$dolibarr_main_cookie_cryptkey='__APPUNIQUEKEY__';
$dolibarr_mailing_limit_sendbyweb='50';
$dolibarr_mailing_limit_sendbycli='400';

$dolibarr_memcached_view_disable=1;
?>
---------------


Dans *Target relative file for config file 1*

[source,bash]
---------------
__INSTANCEDIR__/htdocs/conf/conf.php
---------------


Dans *Dir with dump files*

[source,bash]
---------------
	__DOL_DATA_ROOT__/sellyoursaas/packages/__PACKAGEREF__
---------------

(Avec cette valeur, il sera alors possible de soumettre le fichier dump à charger vi l'onglet *Fichiers joints*


Dans *template fo cron file*

[source,bash]
---------------
# DO NOT EDIT THIS FILE - edit the master and reinstall.
# (/tmp/crontab.OGhHoO/crontab installed on Fri Oct 18 13:58:49 2019)
# (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)
__INSTALLMINUTES__ __INSTALLHOURS__ * * * __INSTANCEDIR__/scripts/cron/cron_run_jobs.php __OSUSERNAME__ firstadmin > __INSTANCEDIR__/documents/cron.log 2>&1
---------------


Dans *shell after*

[source,bash]
---------------
touch __INSTANCEDIR__/documents/install.lock;
chown __OSUSERNAME__.__OSUSERNAME__ __INSTANCEDIR__/documents/install.lock
chmod -R a-w __INSTANCEDIR__/htdocs
chmod -R u+w __INSTANCEDIR__/htdocs/custom
---------------


Dans *sql after*

[source,bash]
---------------
UPDATE llx_user set pass_crypted = '__APPPASSWORD0__', email = '__APPEMAIL__' where login = 'admin' AND (pass = 'admin' OR pass_crypted = 'value_of_hashed_password_encrypted_with_password_hash');
REPLACE INTO llx_const (name, entity, value, type, visible) values('CRON_KEY', 0, '__OSUSERNAME__', 'chaine', 0);
REPLACE INTO llx_const (name, entity, value, type, visible) values('MAIN_INFO_SOCIETE_NOM', 1, '__APPORGNAME__', 'chaine', 0);
--REPLACE INTO llx_const (name, entity, value, type, visible) values('MAIN_INFO_SOCIETE_COUNTRY', 1, '__APPCOUNTRYIDCODELABEL__', 'chaine', 0);
REPLACE INTO llx_const set value = '__APPEMAIL__' where name = 'MAIN_MAIL_EMAIL_FROM';
UPDATE llx_const set value = '__APPEMAIL__' where name = 'MAILING_EMAIL_FROM';
UPDATE llx_const set value = '10.0.0' where name = 'MAIN_VERSION_LAST_UPGRADE';
REPLACE INTO llx_const (name, entity, value, type, visible) values ('MAIN_EXTERNAL_SMTP_CLIENT_IP_ADDRESS', 0, 'ip.server.deployment1, ip.server.deployment2', 'chaine', 0);
REPLACE INTO llx_const (name, entity, value, type, visible) values('MAILING_NO_USING_PHPMAIL', 0, '1', 'chaine', 1);
REPLACE INTO llx_const (name, entity, value, type, visible) values('MAIN_SECURITY_HASH_ALGO', 0, '1', 'password_hash', 1);
---------------

Changer la valeur de 10.0.0 avec la version de l'image de Dolibarr que vous aller déployer


=== Configuration des services

Les services représentent la politique de tarification.

Il faut créer un service de type *Application* qui sera lié au *Package* pour permettre le déploiement.

Le service de type *Application* peut ensuite avoir dans l'onglet *Produit virtuel*, d'autres services de type *Options* ou *Métrique*.


Exemple de service de type Application pour déployer l'application PHP Dolibarr ERP CRM:

image::Example_service_application.png[Exemple service application]

Exemple pour un service qui ajoute une métrique de tarification par Utilisateur:

image::Example_service_metric_USER.png[Exemple service metric]

Exemple pour un service qui ajoute une option pour plus de Go:

image::Example_service_option_GO.png[Exemple service option GO]


Remarque: Les services de types *Options* et *Metrics* doivent être attachés à un service de type *Application* depuis l'onglet Produit Virtuels. 



=== Récupérer l'URL d'inscritpion

Aller dans le menu *SellYourSaas - Pages d'inscriptions* pour obtenir l'URL à utiliser pour souscrire à une instance (package de type Application et ses dépendances). 



=== Principe de déploiement d'une nouvelle instance SellYourSaas

- Le visiteur va sur la page d'inscription  https://myaccount.mdomain.com/register.php et saisit son email et choisit un nom d'URL pour son instance (l'URL peut accepter des paramètres pour spécifier le
services souscrit, ou encore le nom du revendeur).

- En cliquant sur La page d'inscription, les opérations suivantes sont réalisées :
  * Check thirdparty exists or not. If not create the third party, if yes, it says to create the new instance from the customer dashboard.
  * Create a contract (main subscription) into database with status "DEPLOY_IN_PROGRESS" and with a unix account name, pass, database account and pass, and other properties defined on contract. The subscribed service are lines of contracts.
  * Appelle listener de deploiement des instances (micro serveur web qui sert que la page *scripts/remote_server/index.php* et qui exécute l'action "deploy" (1 des 6 remotes actions: "deploy" "undeploy", "suspend", "unsuspend", "refresh", "recreateauthorizedkeys") sur le serveur de déploiement (par exemple pour Dolibarr, cela appelle les scripts *action_deploy_undeploy.sh* ou *action_suspend_unsuspend.sh* selon le code action) pour créer/détruire ou suspendre/réactiver l'instance du client. Voir le chapitre <<remote_actions>>.
  * Edit contract/subscription with status "DEPLOYED" if result of remote action is OK.
  * Send an email to user: Show result to user and send en email (if subscriptions is done from backoffice, this option is off).


[[remote_actions]]
=== Description des 8 remote actions

==== deploy / deployall

Les étapes réalisées par l'agent et la remote action "deploy" ou "deployall" sont:

- Create unix user, pass and home with a restricted shell
- Add a dns entry
- Create a database
- Create database user with password and permissions to access the database.
- Create a virtual host apache
- Deploy files with cp -pr pathtogitofpackage/* /home/jail/home/usrABCDEFGHIK/appAZERTYUIOP
- Deploy documents with cp -pr pathtogitofpackagebis/* /home/jail/home/usrABCDEFGHIK/appAZERTYUIOP
- Copy/create/update configartion files and update them with all variables.
- Copy/create/update cron file and update them with all variables.

==== undeploy / undeployall

Les étapes réalisées par l'agent et la remote action "undeploy" sont:

- Toutes les actions inverses de le l'actions "deploy" (à l'exception de la première action pour le "undeploy": "undeploy" ne détruit pas l'utilisateur Unix, mais "undeployall" oui). 

==== suspend

Les étapes réalisées par l'agent et la remote action "suspend" sont:

- Désactivation du virtual host et reload apache.

Le but est de bloquer l'accès à l'instance avec un lien vers la dashboard pour mettre à jour son mode de paiement, sans toucher à l'instance.

==== unsuspend

Les étapes réalisées par l'agent et la remote action "unsuspend" sont:

- Réactivation du virtual host et reload apache.

==== rename

Les étapes réalisées par l'agent et la remote action "rename" sont:

- Renommer le nom de domaine et/ou le nom de domaine personnalisé (recrée les fichiers virtual hosts).

==== refresh

Les étapes réalisées par l'agent et la remote action "refresh" sont:

- Execution du calcul des métriques shell et renvoi des valeurs.

==== backup

Les étapes réalisées par l'agent et la remote action "backup" sont:

- Appel du script backup_instance pour exécuter le sauvegarde d'une instance

==== recreateauthorizedkeys

Cette remote action ne sert que pour le logiciel Dolibarr ERP CRM. Elle est inutile et inutilisé pour le déploiement d'autres logiciels.
Les étapes réalisées par l'agent et la remote action "recreateauthorizedkeys":

- Mise à jour du fichier ssh */etc/skel/authorized_keys_support* avec les clés publiques passées en paramètres.


=== Quelques règles de fonctionnement métier de SellYourSaas

- Le traitement qui valide les factures à l'état brouillon ne valide qu'une seule facture par client à la fois. Si il y en a 2 en attente, il faudra donc 2 lancements du batch de validation des factures pour les valider toutes les 2.

- Un traitement régulier renouvelle la période de fin de contrat 1 ou 2 jours avant l'expiration du service, mais uniquement si aucune facture impayée n'est ouverte pour le client.

- Si une instance a expirée depuis N jours (N paramétrable et différent si utilisateur avec mode de paiement saisie ou pas), le batch de suspension suspend l'instance.

- Si une instance est suspendue depuis M jours (M paramétrable et différent si client avec mode de paiement saisie ou pas), le batch de désinstallation désinstalle l'instance.

- Si un utilisateur met à jour son mode de paiement, on regarde les factures impayées et on essaie d'encaisser le solde. Si ok, le mode de paiement est validé, sinon refusé.

- Quand une facture est payée, si il n'y a plus de facture impayées et si l'instance du client avait été suspendu, elle est réactivée.

- Si un client a une facture impayée, la facture suivante reste à l'état brouillon.

- Quand une instance est détruite définitivement, les factures brouillons qui lui sont liées sont aussi détruites.  

- Les sauvegardes des bases et fichiers des instances ne se font que pour les clients SellYourSaas payants (ayant saisi au moins une fois un mode de paiement).



<<<

== Annexes

=== Quelques URL standards pour les objectifs Google Analytics ou Statistiques DataDog

Pour activer les statistiques Google Analytics, mettre le tag dans la configuration du module sellyoursaas.

Pour activer les statistiques DataDog, activer l'option dans la configuration du module SellYourSaas.
 
Voici le détail des évennement ou URL qui peuvent etre trackées:

* Page affichée lorsqu'on affiche le formulaire d'inscription
- URL: /register.php   (peut servir d'objectif *Google Analytics "Prospect intéressé"*)                 
- Event DataDog: Aucun

* Page affichée suite à une inscription faite jusqu'au bout
- URL: /index.php?welcomid=   (peut servir d'objectif *Google Analytics "Prospect inscrit"*)
- Event DataDog: Aucun

* Page affichée lorsqu'un mode de paiement est ajouté pour la première fois avec succès = Nouveau client
- URL: /index.php?paymentrecorded=1   (peut servir d'objectif *Google Analytics "Client gagné"*)
- Event Datadog: *sellyoursaas.paymentmodeadded*

* Page affichée lorsqu'un mode de paiement est modifié avec succès
- URL: /index.php?paymentmodified=1
- Event Datadog: *sellyoursaas.paymentmodemodified*

* Paiement réalisé (avec la valeur 1)
- URL: Aucune
- Event DataDog: *sellyoursaas.paymentdone*

* Paiement réalisé (avec la valeur du montant du paiement)
- URL: Aucune
- Event DataDog: *sellyoursaas.payment*

* Client perdu, lorsqu'une instance payante est désinstallé (avec la valeur 1), que ce soit par le batch en automatique ou sur demande du client depuis l'espace client
- URL: Aucune
- Event DataDog: *sellyoursaas.payingcustomerlost*


Exemple de supervision de sellyoursaas avec DataDog:

image::Example_screen_datadog.png[Example ecran supervision DataDog]


=== Options cachées du module SellYourSaas

You can force different values for some setup parameters to overwrite the default value when the customer has registered itself from a page with *mydomain.com* as main domain.

* SELLYOURSAAS_NAME_FORDOMAIN-myseconddomain.com = My Service name bis 
* SELLYOURSAAS_ACCOUNT_URL-myseconddomain.com = https://myaccount.myseconddomain.com
* SELLYOURSAAS_ALLOW_RESELLER_PROGRAM-myseconddomain.com = 0
* SELLYOURSAAS_MAIN_EMAIL_FORDOMAIN-myseconddomain.com = contact@myseconddomain.com
* SELLYOURSAAS_MAIN_EMAIL_PREMIUM_FORDOMAIN-myseconddomain.com = contact+premium@myseconddomain.com
* SELLYOURSAAS_NOREPLY_EMAIL_FORDOMAIN-myseconddomain.cloud = noreply@myseconddomain.com
* SELLYOURSAAS_RESELLER_URL-myseconddomain.com = https://www.myseconddomain.com/resellers.php

To define account to use getipintel API for VPN probability.
* SELLYOURSAAS_GETIPINTEL_EMAIL = contact+checkcustomer@mydomain.com

To enable native Datadog reporting (datadog-agent must just be installed)
* SELLYOURSAAS_DATADOG_ENABLED = 1

If you use an external db server (same value of "databasehost" and "databaseport" in sellyoursaas.conf)
* SELLYOURSAAS_FORCE_DATABASE_HOST = ip or host name of your external mysql server
* SELLYOURSAAS_FORCE_DATABASE_PORT = port of your external mysql server

If you use an ssh port other than 22
* SELLYOURSAAS_SSH_SERVER_PORT = port of your ssh server

If the path of "documents" directory (DOL_DATA_ROOT) is different in deployment server (same value of "newdoldataroot" in sellyoursaas.conf)
* SELLYOURSAAS_FORCE_DOL_DATA_ROOT = /path/of/dolibarr/documents/in/deployment/server

To activate Jailkit, a chroot security system (see Jailkit configuration)
* SELLYOURSAAS_SSH_JAILKIT_ENABLED = 1


=== TroubleShooting

==== Ping hangs in input, not in output

If you are using a server hosted on OpenStack, a security group may exists that block network in some direction/protocols.
Check that your security group match the following setup

image::Example_setup_security_group_horizon.png[Example of setup of security group on horizon]

==== ERROR "IMAP toolkit crash: unselectable socket in ssl_getdata()"

Sur le serveur de déploiement dans */var/log/syslog* en utilisant la fonction IMAP PHP:

 ERROR "IMAP toolkit crash: unselectable socket in ssl_getdata()"

=> Check that you have less than 1024 instances on same deployment server.
=> Check that error log file for instances is shared (instead one log file is open per instance with same unix account leading to troubles).


==== Erreur lors de l'envoi d'email dans */var/log/mail.log*

Erreur lors de l'envoi d'email dans */var/log/mail.log*:

	Mar  2 22:41:59 novafirstcloud6 postfix/error[12146]: 7E69E17DC50: to=<admin@novafirstcloud5.localdomain>, orig_to=<admin>, relay=none, delay=164458, delays=164458/0.06/0/0, dsn=4.4.3, status=deferred (delivery temporarily suspended: Host or domain name not found. Name service error for name=smtp.seendgrid.net type=A: Host not found, try again)

=> Check you have a file */etc/resolv.conf* that is link to ../run/resolvconf/resolv.conf and that in content, it has an entry that point to local bind server so:

nameserver 127.0.0.1
or 
nameserver 127.0.0.53

If not, create it and restart postfix.


==== php sessions files in /var/lib/php/sessions are not purged

php session purge can be done by 
	/etc/cron.d/php
or if systemd is available by
	systemctl status phpsessionclean.timer

Check the correct one is enabled.


==== Error fail2ban does not work on postfix-sasl rule

We found into log file /var/log/fail2ban.log

	2020-09-19 00:57:16,902 fail2ban.actions        [1182]: ERROR   Failed to execute ban jail 'postfix-sasl' action 'iptables-multiport' info 'ActionInfo
	
Edit the file /etc/fail2ban/jail/conf to replace *imap3* (it does not exists) into *imap* for rule postfix-sasl


==== Error when starting fail2ban

You can get more information by running 

sudo fail2ban-client -vvv -x start


==== Problem when starting mariadb / mariadb stop after a timetout

Launching mariadb launch the database but the command never return to the command line prompt and the database is automatically stopped after few minutes.

Check the /var/log/kern.log, you may have apparmor error on /usr/sbin/mysqld.

If yes, disable the apparmor rule: 

aa-disable usr.sbin.mysqld

Then reboot server.


==== Extracting a zip file extract files into filename with path with \ including into name

The problem is into the zip file (may be generated by the bugged Powershell). To solve this, try to unzip from command line with 

	unzip  file.zip

If it fails, you can fix path with this command

	for file in *\\*; do target="${file//\\//}"; mkdir -p "${target%/*}"; mv -v "$file" "$target"; done


==== Error mysqldump: Error 3024: Query execution was interrupted, maximum statement execution time exceeded when dumping table `....` at row: ...

The value for *max_execution_time* is too low or there is a table that has an abnormal number of records.
- Check parameter max_execution_time into */etc/mysql/mysql.conf.d/mysqld.cnf* or similar files.
- Try to run the mysqldump after increasing the max_execution_time dynamically from mysql with:
    SHOW VARIABLES LIKE 'MAX_EXECUTION_TIME'
    SET GLOBAL MAX_EXECUTION_TIME=120000;
- See chapter <<check_database_used>> to analyze size of database. A table may be abnormaly large.


==== Error 77 when using the option MAIN_ODT_AS_PDF to build PDF from ODT automatically

- Check the temp directory is writable by the web server user.


==== Error when doing PHP ssh2_connect or just ssh to a server

If you find into */var/log/auth.log* an error like:

... sshd[...]: Unable to negotiate with ... port ...: no matching key exchange method found. Their offer: diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1 [preauth]

... sshd[...]: Unable to negotiate with ... port ...: no matching key exchange method found. Their offer: ... [preauth]

The client (maybe an old PHP version) is using a deprecated algorithm for negotiation. Edit the file */etc/ssh/sshd_config.d/sellyoursaas.conf* of the target server by adding:

[source,bash]
---------------
# Legacy changes - To allow an old client to connect to
PubkeyAcceptedKeyTypes=+ssh-rsa
HostKeyAlgorithms +ssh-rsa
HostKey /etc/ssh/ssh_host_rsa_key
KexAlgorithms +diffie-hellman-group1-sha1
Ciphers +aes128-cbc
---------------

Then reload ssh with 

[source,bash]
---------------
/etc/init.d/ssh reload
---------------

To test if a couple client-server can work with one algorightm, you can try:

ssh -oHostKeyAlgorithms=ssh-rsa admin@ip.of.server
ssh -oHostKeyAlgorithms=ssh-ed25519 admin@ip.of.server


To use a different version of lib for PHP to make ssh2_connect, you can run Recompile libssh2 and Recompile php-ssh2:

[source,bash]
---------------
git clone https://github.com/libssh2/libssh2.git libssh2; cd libssh2; ./configure; make; make install;
git clone https://github.com/php/pecl-networking-ssh2.git php-ssh2; cd php-ssh2; phpize; ./configure --with-ssh2; make; make install; 
php -i | grep ssh2
restart
---------------

Even if php -i show the new version of library, a reboot may be required to have the new lib taken into account.


==== Some remoteaction generates a PHP coredump

This occurs on some distributions due to a bug in PHP method ssh2_disconnect().
You can disable the call to *ssh2_disconnect()* by setting constant SELLYOURSAAS_SSH2_DISCONNECT_DISABLED to 1


==== On a deployment server, the user root can read files into /home/admin/wwwroot/dolibarr_documents/sellyoursaas

Check that on the master server, the option *no_root_squash* is present into the file */var/exports*


==== Error when doing mysqldump

mysqldump: Error: 'Access denied; you need (at least one of) the PROCESS privilege(s) for this operation' when trying to dump tablespaces

Try to add the parameter --no-tablespaces into the mysqldump command.


==== Error mysql when connecting to database

When logged with a customer linux account osu..., you get this error:
mysql -A -C -u dbu... -p'...' -h localhost -D dbn...
ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (13)

Mariadb may try to use socket mode to connect to the database instead of IP. Try to replace "localhost" with "127.0.0.1" or add the parameter --protocol tcp.

